{
  "hash": "f17447fa0dcbc2d4b241b47242baf355",
  "result": {
    "markdown": "---\ntitle: \"Filter on conditions for more than one variable at the time\"\ndate: \"2022-03-21\"\nimage: thumbnail.png\n---\n\n\n\nTIL I learned that you can filter on conditions for more than one variable at a time using `if_any()` or `if_all()`.\n\n<center>\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">Just to add to the confusion (üòÖ) I think you still do use it for mutate but not for filter?<br><br>‚ö†Ô∏è Using `across()` in `filter()` is deprecated, use `if_any()` or `if_all()`.</p>&mdash; Lucy D‚ÄôAgostino McGowan (@LucyStats) <a href=\"https://twitter.com/LucyStats/status/1506026504618221579?ref_src=twsrc%5Etfw\">March 21, 2022</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script> \n</center>\n\nTurns out that `across()` is only for selecting functions (like `summarize()` and `mutate()`). This was announced in [dplyr 1.0.4](https://www.tidyverse.org/blog/2021/02/dplyr-1-0-4-if-any/).\n\nYou use `if_any()` vs. `if_all()` depending if you need to match some vs. all columns.\n\n`if_any()`:\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars %>%\n  as_tibble() %>%\n  mutate(across(everything(), as.integer)) %>%\n  filter(if_any(contains(\"m\"), ~ . == 0))\n```\n\n::: {.cell-output-stdout}\n```\n# A tibble: 19 √ó 11\n     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb\n   <int> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int>\n 1    21     6   258   110     3     3    19     1     0     3     1\n 2    18     8   360   175     3     3    17     0     0     3     2\n 3    18     6   225   105     2     3    20     1     0     3     1\n 4    14     8   360   245     3     3    15     0     0     3     4\n 5    24     4   146    62     3     3    20     1     0     4     2\n 6    22     4   140    95     3     3    22     1     0     4     2\n 7    19     6   167   123     3     3    18     1     0     4     4\n 8    17     6   167   123     3     3    18     1     0     4     4\n 9    16     8   275   180     3     4    17     0     0     3     3\n10    17     8   275   180     3     3    17     0     0     3     3\n11    15     8   275   180     3     3    18     0     0     3     3\n12    10     8   472   205     2     5    17     0     0     3     4\n13    10     8   460   215     3     5    17     0     0     3     4\n14    14     8   440   230     3     5    17     0     0     3     4\n15    21     4   120    97     3     2    20     1     0     3     1\n16    15     8   318   150     2     3    16     0     0     3     2\n17    15     8   304   150     3     3    17     0     0     3     2\n18    13     8   350   245     3     3    15     0     0     3     4\n19    19     8   400   175     3     3    17     0     0     3     2\n```\n:::\n:::\n\n`if_all()`:\n\n::: {.cell}\n\n```{.r .cell-code}\nlarge <- function(x) {\n  x > mean(x, na.rm = TRUE)\n}\n\nmtcars %>%\n  as_tibble() %>%\n  mutate(across(everything(), as.integer)) %>%\n  filter(if_all(contains(\"m\"), large))\n```\n\n::: {.cell-output-stdout}\n```\n# A tibble: 10 √ó 11\n     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb\n   <int> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int>\n 1    21     6   160   110     3     2    16     0     1     4     4\n 2    21     6   160   110     3     2    17     0     1     4     4\n 3    22     4   108    93     3     2    18     1     1     4     1\n 4    32     4    78    66     4     2    19     1     1     4     1\n 5    30     4    75    52     4     1    18     1     1     4     2\n 6    33     4    71    65     4     1    19     1     1     4     1\n 7    27     4    79    66     4     1    18     1     1     4     1\n 8    26     4   120    91     4     2    16     0     1     5     2\n 9    30     4    95   113     3     1    16     1     1     5     2\n10    21     4   121   109     4     2    18     1     1     4     2\n```\n:::\n:::\n\nAny tidyselect usage is allowable inside `if_*()` just like inside `across()`, so they work very similarly.\n\n**Thanks to [@gvelasq](https://github.com/gvelasq) for his explanation.**",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": [],
    "engineDependencies": {},
    "preserve": {},
    "postProcess": null
  }
}