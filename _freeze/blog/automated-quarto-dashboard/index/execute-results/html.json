{
  "hash": "a32908b5c4ceec10233fd420144692af",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Dashboard creation and automation with Quarto and {pins}\"\ncategories: [\"tutorial\"]\ndate: 2024-06-06\ndescription: \"Inteested in a custom feed of YouTube videos? GitHub Actions + flexdashboard = ❤️.\"\nimage: \"img/thumbnail.jpg\"\nimage-alt: \"John White Alexander, Study in Black and Green, a painting of a young woman pinning something red on her green dress.\"\n---\n\n\n![John White Alexander, Study in Black and Green](img/thumbnail-wide.jpg){fig-alt=\"A young woman pinning something red on her green dress.\"}\nTwo weeks ago, I presented an automated Quarto dashboard on Posit's Monthly End-to-End Workflow with Posit Team. The project consisted of a script that pulls Consumer Price Index (CPI) data from the Bureau of Labor Statistics (BLS) API, transforms and cleans the data, and then saves the data in a pin using the {pins} package[add pins footnote] to Posit Connect[add Connect footnote]. Then, there's a .qmd file that reads the data from the pin and uses it to create a Quarto dashboard that is deployed to Posit Connect. Both the script and .qmd file are scheduled to rerun on a monthly basis on Posit Connect, so that the pin and the dashboard always have the freshest data from BLS. You can watch the recording here:\n\n[youtube link]\n\nThe workflow  was done in Python, and one of the top questions I received was, \"Can I do this in R?\" And the answer is: yes! One of the great things about all the main tools used in the workflow is that they are either multilingual or there are equivalent tools in R or Python.\n\n* {pins} has both R and a Python version\n* Quarto can be run with a knitr engine (for R) or a Jupyter engine (for Python)\n* Posit Connect hosts both R and Python data products\n\nThis blog post will walk through the equivalent workflow but in R, but if you would like to see the Python files, check out this repository!\n\nAlso, I wrote a blog post on created an automated dashboard using {flexdashboard} and GitHub Actions, which you can check out here:\n\n## Before we begin... Quarto dashboards?!\n\n\n\n\n::: {.cell}\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}