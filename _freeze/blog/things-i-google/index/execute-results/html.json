{
  "hash": "ab081967cc1e8688f135a16a52085c90",
  "result": {
    "markdown": "---\ntitle: \"Six things I always Google when using ggplot2\"\ncategories: [\"visualize\"]\ndate: \"2020-01-27\"\ndescription: \"My frequently-used reference for styling {ggplot2} charts.\"\nimage: thumbnail.jpg\n---\n\n![Henri Edmond Cross, Two Women by the Shore, Mediterranean (1896)](thumbnail-wide.jpg){fig-alt=\"Colorful dots making up a painting of a garden with two women\"}\n\n\n\nI often use {ggplot2} to create graphs but there are certain things I *always* have to Google. I figured I'd create a post for quick reference for myself but I'd love to hear what you always have to look up!\n\n* [Remove the Legend](#remove-the-legend)\n* [Change Legend Title and Labels](#change-legend-title-and-labels)\n* [Manually Change Colors](#manually-change-colors)\n* [Remove X Axis Labels](#remove-x-axis-labels)\n* [Start the Y Axis at a Specific Number](#start-the-y-axis-at-a-specific-number)\n* [Use Scales on the Y Axis](#use-scales-on-the-y-axis)\n\nTo showcase what's happening, I am going to use a [TidyTuesday](https://github.com/rfordatascience/tidytuesday) dataset: Spotify songs! Let's start by creating a simple graph.\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\n# Load Data\nspotify_songs <- \n  readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-01-21/spotify_songs.csv')\n\nspotify_songs %>% \n  ggplot(aes(x = playlist_genre)) +\n  geom_histogram(stat = \"count\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=100%}\n:::\n:::\n\n## Remove the legend\n\n`theme(legend.position = \"none\")`\n\nAhh... this one always gets me. Sometimes when your color is mostly just for aesthetics,  it doesn't make sense to also have a color legend. This removes the legend and makes the graph look cleaner.\n\n::: {.cell}\n\n```{.r .cell-code}\nspotify_songs %>% \n  ggplot(aes(x = playlist_genre, fill = playlist_genre)) +\n  geom_histogram(stat = \"count\") +\n  theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=100%}\n:::\n:::\n\n## Change legend title and labels\n\n`scale_fill_discrete(name = \"New Legend Title\", labels = c(\"lab1\" = \"Label 1\", \"lab2\" = \"Label 2\"))`\n\nAlright, say I do want the legend. How do I make it something readable?\n\n::: {.cell}\n\n```{.r .cell-code}\nspotify_songs %>% \n  ggplot(aes(x = playlist_genre, fill = playlist_genre)) +\n  geom_histogram(stat = \"count\") +\n  scale_fill_discrete(name = \"Playlist Genre\", \n                      labels = c(\"edm\" = \"EDM\", \n                                 \"latin\" = \"Latin\", \n                                 \"pop\" = \"Pop\", \n                                 \"r&b\" = \"R&B\", \n                                 \"rap\" = \"Rap\", \n                                 \"rock\" = \"Rock\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=100%}\n:::\n:::\n\n## Manually change colors\n\n`scale_fill_manual(\"New Legend Title\", values = c(\"lab1\" = \"#000000\", \"lab2\" = \"#FFFFFF\"))`\n\nThis is a bit trickier, in that you cannot use `scale_fill_manual` and `scale_fill_discrete` separately on the same plot as they override each other. However, if you want to change the labels *and* the colors together, you can use `scale_fill_manual` like below.\n\n::: {.cell}\n\n```{.r .cell-code}\nspotify_songs %>% \n  ggplot(aes(x = playlist_genre, fill = playlist_genre)) +\n  geom_histogram(stat = \"count\") +\n  scale_fill_manual(name = \"Playlist Genre\", \n                    labels = c(\"edm\" = \"EDM\", \n                               \"latin\" = \"Latin\", \n                               \"pop\" = \"Pop\", \n                               \"r&b\" = \"R&B\", \n                               \"rap\" = \"Rap\", \n                               \"rock\" = \"Rock\"),\n                    values = c(\"edm\" = \"#0081e8\", \n                               \"latin\" = \"#9597f0\", \n                               \"pop\" = \"#d4b4f6\", \n                               \"r&b\" = \"#ffd6ff\", \n                               \"rap\" = \"#ffa1d4\", \n                               \"rock\" = \"#ff688c\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=100%}\n:::\n:::\n\n## Remove x-axis labels\n\n`theme(axis.title.x = element_blank(), axis.text.x = element_blank(), axis.ticks.x = element_blank())`\n        \nIn this case, since we have a legend, we don't need any x axis labels. Sometimes I use this if there's redundant information or if it otherwise makes the graph look cleaner.\n\n::: {.cell}\n\n```{.r .cell-code}\nspotify_songs %>% \n  ggplot(aes(x = playlist_genre, fill = playlist_genre)) +\n  geom_histogram(stat = \"count\") +\n  scale_fill_manual(name = \"Playlist Genre\", \n                    labels = c(\"edm\" = \"EDM\", \n                               \"latin\" = \"Latin\", \n                               \"pop\" = \"Pop\", \n                               \"r&b\" = \"R&B\", \n                               \"rap\" = \"Rap\", \n                               \"rock\" = \"Rock\"),\n                    values = c(\"edm\" = \"#0081e8\", \n                               \"latin\" = \"#9597f0\", \n                               \"pop\" = \"#d4b4f6\", \n                               \"r&b\" = \"#ffd6ff\", \n                               \"rap\" = \"#ffa1d4\", \n                               \"rock\" = \"#ff688c\")) +\n  theme(axis.title.x = element_blank(),\n         axis.text.x = element_blank(),\n         axis.ticks.x = element_blank())\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=100%}\n:::\n:::\n\n## Start the y-axis at a specific number\n\n`scale_y_continuous(name = \"New Y Axis Title\", limits = c(0, 1000000))`\n\nOften times, we want our graph's y axis to start at 0. In this example it already does, but this handy parameter allows us to set exactly what we want our y axis to be.\n\n::: {.cell}\n\n```{.r .cell-code}\nspotify_songs %>% \n  ggplot(aes(x = playlist_genre, fill = playlist_genre)) +\n  geom_histogram(stat = \"count\") +\n  scale_fill_manual(name = \"Playlist Genre\", \n                    labels = c(\"edm\" = \"EDM\", \n                               \"latin\" = \"Latin\", \n                               \"pop\" = \"Pop\", \n                               \"r&b\" = \"R&B\", \n                               \"rap\" = \"Rap\", \n                               \"rock\" = \"Rock\"),\n                    values = c(\"edm\" = \"#0081e8\", \n                               \"latin\" = \"#9597f0\", \n                               \"pop\" = \"#d4b4f6\", \n                               \"r&b\" = \"#ffd6ff\", \n                               \"rap\" = \"#ffa1d4\", \n                               \"rock\" = \"#ff688c\")) +\n  theme(axis.title.x = element_blank(),\n         axis.text.x = element_blank(),\n         axis.ticks.x = element_blank()) +\n  scale_y_continuous(name = \"Count\", limits = c(0, 10000))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-14-1.png){width=100%}\n:::\n:::\n\n## Use scales on the y-axis\n\n`scale_y_continuous(label = scales::format)`\n\nDepending on our data, we may want the y axis to be formatted a certain way (using dollar signs, commas, percentage signs, etc.). The handy {scales} package allows us to do that easily. \n\n::: {.cell}\n\n```{.r .cell-code}\nspotify_songs %>% \n  ggplot(aes(x = playlist_genre, fill = playlist_genre)) +\n  geom_histogram(stat = \"count\") +\n  scale_fill_manual(name = \"Playlist Genre\", \n                    labels = c(\"edm\" = \"EDM\", \n                               \"latin\" = \"Latin\", \n                               \"pop\" = \"Pop\", \n                               \"r&b\" = \"R&B\", \n                               \"rap\" = \"Rap\", \n                               \"rock\" = \"Rock\"),\n                    values = c(\"edm\" = \"#0081e8\", \n                               \"latin\" = \"#9597f0\", \n                               \"pop\" = \"#d4b4f6\", \n                               \"r&b\" = \"#ffd6ff\", \n                               \"rap\" = \"#ffa1d4\", \n                               \"rock\" = \"#ff688c\")) +\n  theme(axis.title.x = element_blank(),\n         axis.text.x = element_blank(),\n         axis.ticks.x = element_blank()) +\n  scale_y_continuous(name = \"Count\", limits = c(0, 10000),\n                     labels = scales::comma)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-16-1.png){width=100%}\n:::\n:::\n\nThere we have it! Six things I always eventually end up Googling when I am making plots using {ggplot2}. Hopefully now I can just look at this page instead of searching each and every time!\n\n<center>\n*Liked this post? I'd love for you to retweet!*\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">I wrote a quick <a href=\"https://twitter.com/hashtag/rstats?src=hash&amp;ref_src=twsrc%5Etfw\">#rstats</a> blogpost: &quot;Six Things I Always Google When Using ggplot2&quot; ðŸ”Ž ðŸ“Š What do you always have to look up when creating your <a href=\"https://twitter.com/hashtag/ggplot2?src=hash&amp;ref_src=twsrc%5Etfw\">#ggplot2</a> graphs? ðŸ¤”ðŸ¤” <a href=\"https://t.co/jEOR3RDDIh\">https://t.co/jEOR3RDDIh</a></p>&mdash; Isabella VelÃ¡squez (@ivelasq3) <a href=\"https://twitter.com/ivelasq3/status/1222169501464133633?ref_src=twsrc%5Etfw\">January 28, 2020</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script> \n</center>",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": [],
    "engineDependencies": {},
    "preserve": {},
    "postProcess": null
  }
}