{
  "hash": "8d8520a763443a963d1cfcff401c2252",
  "result": {
    "markdown": "---\ntitle: \"Not-basic base R functions\"\ndate: \"2022-11-13\"\ncategories: [\"reference\"]\ndescription: \"There are so many goodies in base R. Let's explore some functions you may not know.\"\nimage: thumbnail.jpg\nimage-alt: \"Leonetto Cappiello, Benedictine.\"\n---\n\n\n![Leonetto Cappiello, Benedictine](thumbnail-wide.jpg){fig-alt=\"A man in red clothes holding up a latern at a window, overlooking a city.\"}\n\nWhat if I told you that you could do some pretty amazing things, not loading any packages at all?\n\nAdmittedly, some of these functions are not from base R but from stats, which are also imported when you open up R.\n\n* [invisible()](#invisible): Return a temporarily invisible copy of an object\n\n## 1. invisible()\n\nThe `invisible()` function \"returns a temporarily invisible copy of an object\". For a quick example from the documentation:\n\n::: {.column-margin}\n**Resources**\n\n* [invisible documentation](https://rdrr.io/github/robertzk/monadicbase/man/invisible.html)\n* [StackOverflow discussion](https://stackoverflow.com/questions/11653127/what-does-the-function-invisible-do)\n* [Tidyverse design guide](https://design.tidyverse.org/out-invisible.html)\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# These functions both return their argument\nf1 <- function(x) x\nf2 <- function(x) invisible(x)\nf1(1)  # This prints\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n\n```{.r .cell-code}\nf2(1)  # This does not\n```\n:::\n\n\nThe way to see invisible output is by saving to a variable or running `print()`. These will print:\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- f2(1)\na # This prints\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n\n```{.r .cell-code}\nprint(f2(1)) # This prints\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n:::\n\n\nMany of your favorite functions use `invisible()`. For example, `readr::write_csv()` [invisibly returns](https://github.com/tidyverse/readr/blob/e4d640ace3bb6ae095a1114158854a38a1da3a30/R/write.R#L214) the data frame that was saved.\n\nIf you're writing functions, then `invisible()` can be very helpful. \n\n* In the example below, using {purrr} and `tidytab::tab_run())` together results in two `NULL` list items that I do not need. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(purrr)\n\ndat <-\n  tibble::tibble(\n    col1 = c(3, 2, 2, 1, 2, 1),\n    col2 = c(1, 2, 1, 1, 3, 2),\n    ct = c(2, 2, 2, 2, 2, 2)\n  )\n\nvars <- c(\"col1\", \"col2\")\n\n# Install from devtools::install_github(\"gvelasq/tidytab\")\ntab_run <- function(.x){\n  dat %>%\n    tidytab::tab2(.x, ct)\n}\n\npurrr::map(.x = vars,\n           .f = tab_run)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n           │        ct │           \n      col1 │         2 │     Total \n───────────┼───────────┼──────────\n         1 │         2 │         2 \n         2 │         3 │         3 \n         3 │         1 │         1 \n───────────┼───────────┼──────────\n     Total │         6 │         6 \n\n           │        ct │           \n      col2 │         2 │     Total \n───────────┼───────────┼──────────\n         1 │         3 │         3 \n         2 │         2 │         2 \n         3 │         1 │         1 \n───────────┼───────────┼──────────\n     Total │         6 │         6 \n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\nNULL\n\n[[2]]\nNULL\n```\n:::\n:::\n\n\nRunning `invisible()` eliminates that!\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninvisible(purrr::map(.x = vars,\n                     .f = tab_run))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n           │        ct │           \n      col1 │         2 │     Total \n───────────┼───────────┼──────────\n         1 │         2 │         2 \n         2 │         3 │         3 \n         3 │         1 │         1 \n───────────┼───────────┼──────────\n     Total │         6 │         6 \n\n           │        ct │           \n      col2 │         2 │     Total \n───────────┼───────────┼──────────\n         1 │         3 │         3 \n         2 │         2 │         2 \n         3 │         1 │         1 \n───────────┼───────────┼──────────\n     Total │         6 │         6 \n```\n:::\n:::\n\n\n* When writing a function, R can print a lot of stuff implictly. Per the [Tidyverse design guide](https://design.tidyverse.org/out-invisible.html), \"if a function is called primarily for its side-effects, it should invisibly return a useful output\".\n\nThis is useful for generating intermediate diagnostics or for saving multiple output formats. <!--add more-->\n\n## 2. noquote\n\nThe `noquote()` function \"prints character strings without quotes.\" \n\n::: {.column-margin}\n**Resources**\n\n* [noquote documentation](https://www.educative.io/answers/what-is-the-noquote-function-in-r)\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(\"This is the print() function\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"This is the print() function\"\n```\n:::\n\n```{.r .cell-code}\npaste(\"This is the paste() function\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"This is the paste() function\"\n```\n:::\n\n```{.r .cell-code}\n# implementing the noquote() function \n\nnoquote(\"This is the noquote() function\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] This is the noquote() function\n```\n:::\n:::\n\n\n\n## 3. coplot\n\n\n\nsplit\n\nencodeString\n\nnzchar\n\nfile.choose()\n\nlengths\n\nwith",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}