{
  "hash": "e1f720f566f158c047a1d9415cbbe532",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Six not-so-basic base R functions\"\ndate: \"2024-01-17\"\ncategories: [\"reference\"]\ndescription: \"There are so many goodies in base R. Let's explore some functions you may not know.\"\nimage: thumbnail.jpg\nimage-alt: \"Leonetto Cappiello, Benedictine.\"\nwebr:\n  show-startup-message: false\nfilters:\n  - webr\n---\n\n![Leonetto Cappiello, Benedictine](thumbnail-wide.jpg){fig-alt=\"A crop of Leonetto Cappiello, Benedictine, showing a man holding a lantern over a city.\"}\n\nR is known for its versatility and extensive collection of packages. As of the publishing of this post, there are over 23 thousand packages on [R-universe](https://r-universe.dev/search/). But what if I told you that you could do some pretty amazing things without loading any packages at all?\n\nThere's a lot of [love](https://www.rostrum.blog/posts/2023-10-17-nhs-r-2023/) for base R, and I am excited to pile on. In this blog post, we will explore a few of my favorite \"not-so-basic\" (i.e., maybe new to you!) base R functions. Click 'Run code' in order to see them in action, made possible by [webR](https://docs.r-wasm.org/webr/latest/) and the [quarto-webr extension](https://quarto-webr.thecoatlessprofessor.com/)![^longnote]\n\n::: {.callout-note}\nThis post includes examples from the [base](https://stat.ethz.ch/R-manual/R-devel/library/base/html/00Index.html), [graphics](https://stat.ethz.ch/R-manual/R-devel/library/graphics/html/00Index.html), [datasets](https://stat.ethz.ch/R-manual/R-devel/library/datasets/html/00Index.html), and [stats](https://stat.ethz.ch/R-manual/R-devel/library/stats/html/00Index.html) packages, which are automatically loaded when you open R. Additional base R packages include grDevices, utils, and methods.[^packages]\n:::\n\n1. [invisible()](#invisible): Return an invisible copy of an object\n2. [noquote()](#noquote): Print a character string without quotes\n3. [coplot()](#coplot): Visualize interactions\n4. [nzchar()](#nzchar): Find out if elements of a character vector are non-empty strings\n5. [with()](#with): Evaluate an expression in a data environment\n6. [lengths()](#lengths): Determine lengths of a list or vector elements\n7. [Null coalescing operator `%||%`](#null-coalescing-operator-in-r): Return first input if not `NULL`, otherwise return second input\n\n::: {.callout-note}\nI accidentally had seven functions in my post, even though it's titled \"Six not-so-basic base R functions.\" Oops! Consider the null-coalescing operator as a bonus, as it's not part of base R yet. üòä\n:::\n\n## 1. invisible\n\nThe `invisible()` function \"returns a temporarily invisible copy of an object\" by hiding the output of a function in the console. When you wrap a function in `invisible()`, it will execute normally and can be assigned to a variable or used in other operations, but the result isn't printed out.\n\n::: {.column-margin}\n**Resources**\n\n* [invisible documentation](https://rdrr.io/github/robertzk/monadicbase/man/invisible.html)\n* [What does the function invisible() do?](https://stackoverflow.com/questions/11653127/what-does-the-function-invisible-do)\n* [Tidyverse design guide](https://design.tidyverse.org/out-invisible.html)\n:::\n\nBelow are examples where the functions return their argument `x`, but one does so invisibly.\n\n```{webr-r}\nf1 <- function(x) x\nf1(\"This prints\")\n```\n\n\n```{webr-r}\nf2 <- function(x) invisible(x)\nf2(\"This does not print\")\n```\n\nThe way to see invisible output is by saving to a variable or running `print()`. Both of the below will print:\n\n```{webr-r}\na <- f2(\"This prints because it's a saved variable\")\na\n\nprint(f2(\"This prints because of print()\"))\n```\n\nLet's try another example. Run the chunk below to install the purrr and tidytab packages. Installing the CRAN version of purrr from the webR binary repository is as easy as calling `webr::install()`. The tidytab package is compiled into a WebAssembly binary on [R-universe](https://gvelasq.r-universe.dev/tidytab#) and needs the `repos` argument to find it. `mount = FALSE` is due to a bug in the Firefox WebAssembly interpreter. If you‚Äôre not using Firefox, then I suggest you try the code below with `mount = TRUE`! (Note: this might take a few seconds, and longer with `mount = FALSE`.)\n\n```{webr-r}\nwebr::install(\"purrr\")\n\nwebr::install(\"tidytab\", \n              mount = FALSE, \n              repos = c(\"https://gvelasq.r-universe.dev\", \"https://repo.r-wasm.org\"))\n```\n\nUsing purrr and `tidytab::tab2()` together results in two `NULL` list items we do not need.\n\n```{webr-r}\nlibrary(purrr)\nlibrary(tidytab)\n\ndat <-\n  data.frame(\n    col1 = c(3, 2, 2, 1, 2, 1),\n    col2 = c(1, 2, 1, 1, 3, 2),\n    ct = c(2, 2, 2, 2, 2, 2)\n  )\n\nvars <- c(\"col1\", \"col2\")\n\ntab_run <- function(.x){\n  dat |>\n    tidytab::tab2(all_of(.x), \"ct\")\n}\n\npurrr::map(.x = vars,\n           .f = tab_run)\n```\n\nRunning `invisible()` eliminates that!\n\n```{webr-r}\ninvisible(purrr::map(.x = vars,\n                     .f = tab_run))\n```\n\nWhen writing a function, R can print a lot of stuff implicitly. Using `invisible()`, you can return results while controlling what is displayed to a user, avoiding cluttering the console with intermediate results.\n\nPer the [Tidyverse design guide](https://design.tidyverse.org/out-invisible.html), \"if a function is called primarily for its side-effects, it should invisibly return a useful output.\" In fact, many of your favorite functions use `invisible()`, such as `readr::write_csv()`, which [invisibly returns](https://github.com/tidyverse/readr/blob/e4d640ace3bb6ae095a1114158854a38a1da3a30/R/write.R#L214) the saved data frame.  \n\n## 2. noquote\n\nThe `noquote()` function \"prints character strings without quotes.\" \n\n::: {.column-margin}\n**Resources**\n\n* [noquote documentation](https://www.educative.io/answers/what-is-the-noquote-function-in-r)\n\n:::\n\n```{webr-r}\nprint(\"Notice the quotation marks?\")\n```\n\n```{webr-r}\n# Implementing the noquote() function \nnoquote(\"Now they're gone, thanks to noquote()!\")\n```\n\nI use `noquote()` in a function `url_make` that converts Markdown reference-style links into HTML links. The input is a character string of a Markdown reference-style link `mdUrl` and the output is the HTML version of that URL. With `noquote()`, I can paste the output directly in my text. \n\n<center><blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">Very proud of my little <a href=\"https://twitter.com/hashtag/rstats?src=hash&amp;ref_src=twsrc%5Etfw\">#rstats</a> function to turn a Markdown URL to HTML ‚ò∫Ô∏è (and save it to your clipboard too). <a href=\"https://t.co/TsddtTDn9R\">pic.twitter.com/TsddtTDn9R</a></p>&mdash; Isabella Vel√°squez (@ivelasq3) <a href=\"https://twitter.com/ivelasq3/status/1519366644782583813?ref_src=twsrc%5Etfw\">April 27, 2022</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></center> \n\nTry it out in an anonymous function below!\n\n::: {.column-margin}\nLearn more about this syntax in my [previous blog post](https://ivelasq.rbind.io/blog/understanding-the-r-pipe/)!\n:::\n\n```{webr-r}\n\"[Isabella's blog](https://ivelasq.rbind.io)\" |> (\\(.) {\n  text <- sub(\"\\\\].*\", \"\", sub(\".*\\\\[\", \"\", .))\n  url <- sub(\"\\\\).*\", \"\", sub(\".*\\\\(\", \"\", .))\n  noquote(paste0('Thanks for checking out <a href=\"', url, '\" target = \"_blank\">', text, '</a>!'))\n})()\n```\n\n## 3. coplot\n\nThe `coplot()` function creates conditioning plots, which are helpful in multivariate analysis. They allow you to explore pairs of variables conditioned on a third so you can understand how relationships change across different conditions.\n\n::: {.column-margin}\n**Resources**\n\n* [coplot documentation](https://stat.ethz.ch/R-manual/R-devel/library/graphics/html/coplot.html)\n* [An introduction to R](https://intro2r.com/simple-base-r-plots.html#coplots)\n* [How to read a coplot() graph](https://stackoverflow.com/questions/29472360/how-to-read-a-coplot-graph)\n:::\n\nThe syntax of `coplot()` is `coplot(y ~ x | a, data)`, where `y` and `x` are the variables you want to plot, `a` is the conditioning variable, and `data` is the data frame. The variables provided to `coplot()` can be either numeric or factors.\n\nUsing the built-in `quakes` dataset, let's look at the relationship between the latitude (`lat`) and the longitude (`long`) and how it varies depending on the depth in km of seismic events (`depth`).\n\n```{webr-r}\ncoplot(lat ~ long | depth, data = quakes)\n```\n\nTo interpret this plot:\n\n* Latitude is plotted on the y-axis\n* Longitude is plotted on the x-axis\n* The six plots show the relationship of these two variables for different values of depth\n* The bar plot at the top indicates the range of depth values for each of the plots\n* The plots in the lower left have the lowest range of depth values and the plots in the top right have the highest range of depth values\n\nThe orientation of plots might not be the most intuitive. Set `rows = 1` to make the coplot easier to read.\n\n```{webr-r}\ncoplot(lat ~ long | depth, data = quakes,  rows = 1)\n```\n\nHere, you can see how the area of Fiji earthquakes grows smaller with increasing depth.\n\nYou can also condition on two variables with the syntax `coplot(y ~ x| a * b)`, where the plots of `y` versus `x` are produced conditional on the two variables `a` and `b`. Below, the coplot shows the relationship with depth from left to right and the relationship with magnitude (`mag`) from top to bottom. Check out a more in-depth explanation of this plot on [StackOverflow](https://stackoverflow.com/questions/29472360/how-to-read-a-coplot-graph).\n\n\n```{webr}\ncoplot(lat ~ long | depth * mag, data = quakes, number = c(3, 4))\n```\n\n\nI first learned about `coplot()` thanks to Eric Leung's tweet. Thanks, Eric!\n\n<center><blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">TIL about coplots in base <a href=\"https://twitter.com/hashtag/RStats?src=hash&amp;ref_src=twsrc%5Etfw\">#RStats</a>. in my nearly decade use of R, i&#39;ve never come across this function to quickly explore pairs of variables conditioned on a third<br><br>library(palmerpenguins)<br>coplot(body_mass_g ~ bill_length_mm|species, data = penguins)<a href=\"https://t.co/EVpI738VzO\">https://t.co/EVpI738VzO</a> <a href=\"https://t.co/zcTw4HGvnZ\">pic.twitter.com/zcTw4HGvnZ</a></p>&mdash; Eric Leung Ê¢ÅÊå∫‰∫Æ (@erictleung) <a href=\"https://twitter.com/erictleung/status/1555656643056058369?ref_src=twsrc%5Etfw\">August 5, 2022</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></center> \n\n## 4. nzchar\n\nFrom the [documentation](https://rdrr.io/r/base/nchar.html), \"`nzchar()` is a fast way to find out if elements of a character vector are non-empty strings\". It returns `TRUE` for non-empty strings and `FALSE` for empty strings. This function is particularly helpful when working with environment variables - see an example in the [tuber](https://github.com/gojiplus/tuber/blob/4ccf5879b6a3017e88588e65d53ab1e1afce4769/R/delete_channel_sections.R#L21) documentation!\n\n::: {.column-margin}\n**Resources**\n\n* [nzchar documentation](https://stat.ethz.ch/R-manual/R-devel/library/base/html/nchar.html)\n:::\n\n```{webr-r}\n# This is not empty\nSys.getenv(\"R_LIBS_USER\")\n\n# This returns TRUE\nnzchar(Sys.getenv(\"R_LIBS_USER\"))\n```\n\n```{webr-r}\n# This is empty\nSys.getenv(\"test\")\n\n# This returns FALSE\nnzchar(Sys.getenv(\"test\"))\n```\n\nI have written about nzchar [in the past](https://ivelasq.rbind.io/til/asciicast/) and I've also explained how to create a GIF using [asciicast](https://github.com/r-lib/asciicast)!\n\n<center>\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">TIL: nzchar(). Super useful when working with environment variables in R.<br><br>also, <a href=\"https://twitter.com/hashtag/asciicast?src=hash&amp;ref_src=twsrc%5Etfw\">#asciicast</a> is amazing! install the GIF converter with remotes::install_github(&#39;r-lib/asciicast&#39;, ref = remotes::github_pull(24)) <a href=\"https://twitter.com/hashtag/rstats?src=hash&amp;ref_src=twsrc%5Etfw\">#rstats</a> h/t <a href=\"https://twitter.com/GaborCsardi?ref_src=twsrc%5Etfw\">@GaborCsardi</a> <a href=\"https://t.co/pCZQLCNaDl\">pic.twitter.com/pCZQLCNaDl</a></p>&mdash; Isabella Vel√°squez (@ivelasq3) <a href=\"https://twitter.com/ivelasq3/status/1524193394037342211?ref_src=twsrc%5Etfw\">May 11, 2022</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></center>\n\n## 5. with\n\nIf you use base R, you've likely encountered the dollar sign `$` when evaluating expressions with variables from a data frame. The `with()` function lets you reference columns directly, eliminating the need to repeat the data frame name multiple times. This makes your code more concise and easier to read.\n\n::: {.column-margin}\n**Resources**\n\n* [with documentation](https://stat.ethz.ch/R-manual/R-devel/library/base/html/with.html)\n* [When to use 'with' function and why is it good?](https://stackoverflow.com/questions/42283479/when-to-use-with-function-and-why-is-it-good)\n:::\n\nSo, instead of writing `plot(mtcars$hp, mtcars$mpg)`, you can write:\n\n\n```{webr}\nwith(mtcars, plot(hp, mpg))\n```\n\n\nThis is particularly handy to use with the base R pipe `|>`:\n\n\n```{webr}\nmtcars |> with(plot(hp, mpg))\n```\n\n\n[Michael Love's Tweet](https://twitter.com/mikelove/status/1197190835994943489) shows how to connect a dplyr chain to a base plot function using `with()`:\n\n\n```{webr}\nwebr::install(\"dplyr\")\nlibrary(dplyr)\n        \nmtcars |> dplyr::filter(hp > 100) |> with(plot(hp, mpg))\n```\n\n\n## 6. lengths\n\n`lengths()` is a more efficient version of `sapply(df, length)`. `length()` determines the number of elements in an object, and `lengths()` will provide the lengths of elements across columns in the data frame.\n\n::: {.column-margin}\n**Resources**\n\n* [lengths documentation](https://stat.ethz.ch/R-manual/R-devel/library/base/html/lengths.html)\n* [Summing the lengths of lists inside a list in R](https://stackoverflow.com/questions/71969291/summing-the-lengths-of-lists-inside-a-list-in-r)\n:::\n\n\n```{webr}\ndf <- data.frame(A = c(1, 2, 3), B = c(4, 5, 6), C = c(7, 8, 9))\n\nlengths(df)\n```\n\n\nPretty straightforward but I think it is a neat function :)\n\n**Note 2024-01-21**: As [@ProfBootyPhD](https://twitter.com/ProfBootyPhD) [mentioned on Twitter](https://twitter.com/ProfBootyPhD/status/1748025353648689557), a better example of `lengths()` would be a list \"since all the columns of a df are required to be the same length.\" Here is the example from StackOverflow:\n\n\n```{webr}\ndf1 <- data.frame(x = 1:5, y = letters[1:5])\ndf2 <- data.frame(x = 1:15, y = letters[1:15])\ndf3 <- data.frame(x = 1:25, y = letters[1:25])\ndf4 <- data.frame(x = 1:6, y = letters[1:6])\ndf5 <- data.frame(x = 1:8, y = letters[1:8])\n\nl1 <- list(df1, df2)\nl2 <- list(df3, df4, df5)\nmylist <- list(l1, l2)\n\nlengths(mylist)\n```\n\n\n## 7. Null-coalescing operator in R, %||%\n\nOK, this one isn't in base R -- yet! In the [upcoming release](https://developer.r-project.org/blosxom.cgi/R-devel/2023/10/26#n2023-10-26), R will automatically provide the [null-coalescing operator](https://en.m.wikipedia.org/wiki/Null_coalescing_operator), `%||%`. Per the release notes:\n\n> ‚ÄòL %||% R‚Äô newly in base is an expressive idiom for the ‚Äòif(!is.null(L)) L else R‚Äô or ‚Äòif(is.null(L)) R else L‚Äô phrases.\n\nOr, in code:\n\n```r\n`%||%` <- function(x, y) {\n   if (is_null(x)) y else x\n}\n```\n\nEssentially, this means: if the first (left-hand) input `x` is `NULL`, return `y`. If `x` is not `NULL`, return the input.\n\nIt was great to see Jenny Bryan and the R community celebrate the formal inclusion of the null-coalescing operator into the R language on [Mastodon](https://fosstodon.org/@jennybryan/111302964025298493). The null-coalescing operator is particularly useful for R package developers, as highlighted by Jenny in her [useR! 2018 keynote](https://www.youtube.com/watch?v=7oyiPBjLAWY), used when the tidyverse team needs to assess whether an argument has been supplied, or if the default value which is commonly `NULL` has been passed, meaning that the default argument has been supplied.\n\n![](example.png){fig-alt=\"Jenny Bryan's Code smell and feels talk, showing the slide showing an example of the use of the null-coalescing operator.\"}\n<center><caption><a href=\"https://speakerdeck.com/jennybc/code-smells-and-feels?slide=69\" target=_blank>Jenny Bryan's Code smell and feels null-coalescing operator example</a></caption></center>\n<br>\nHowever, the null-coalescing operator can also be useful in interactive use, for functions that take `NULL` as a valid argument. In this case, if supplied in the argument itself it can yield different interesting behaviors. For example:\n\n\n```{webr}\n# rlang must be loaded because the operator is not available in base R yet\nwebr::install(\"rlang\")\nlibrary(rlang)\n\nadd_commas <- function(x) {\n  if (length(x) <= 1) {\n    collapse_arg <- NULL\n  } else {\n    collapse_arg <- \", \"\n  }\n  print(paste0(x, collapse = collapse_arg %||% \"\"))\n}\n\nadd_commas(c(\"apples\"))\nadd_commas(c(\"apples\", \"bananas\"))\n```\n\n\nThere's more [discussion](https://fosstodon.org/@eddelbuettel@mastodon.social/111295691967509884) about the utility of the function.\n\n## The fun-ctions never stop\n\nWant even more functions (base R or not)? Here are some other resources to check out:\n\n* [Ma√´lle Salmon's blog posts on useful functions](https://masalmon.eu/tags/useful-functions/)\n* [Neil Wright's post on five useful R functions](https://www.neilwright.uk/posts/five-r-functions)\n* [Yihui Xie's list of three useful functions in base R](https://yihui.org/en/2023/10/three-functions/)\n* [Ella Kaye's Advent of Code walkthroughs](https://adventofcode.ellakaye.co.uk/2023/day/1/)\n* [Ihaddaden M. EL Fodil, Ph.D's Twitter thread](https://twitter.com/moh_fodil/status/1537078271501905920)\n* TidyX Screencasts, such as [this one](https://www.youtube.com/watch?v=bh-2JONnJ0k)\n\nThanks to all community members sharing their code and functions!\n\n*Liked this article? I‚Äôd love for you to share!*\n\n::: {.panel-tabset}\n## Twitter\n\n{{< tweet ivelasq3 1747647547148321205 >}}\n\n\n\n## Mastodon\n\n<iframe src=\"https://fosstodon.org/@ivelasq3/111772069621750384/embed\" class=\"mastodon-embed\" style=\"max-width: 100%; border: 0\" width=\"400\" allowfullscreen=\"allowfullscreen\"></iframe><script src=\"https://fosstodon.org/embed.js\" async=\"async\"></script>\n\n:::\n\n\n[^longnote]: Many thanks to the following resources for making this post possible:\n\n    - George Stagg's webR and the [webR documentation](https://docs.r-wasm.org/webr/latest/).\n    - James Joseph Balamuta's [Quarto extension for webR](https://quarto-webr.thecoatlessprofessor.com/).\n    - Brian Kent's [blog post](https://blog.theapricot.io/posts/quarto-headers/) on adding headers to a Quarto blog on Netlify.\n    \n[^packages]: This is a [handy guide](https://rpubs.com/Mentors_Ubiqum/list_packages) for seeing the packages loaded in your R session!\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}