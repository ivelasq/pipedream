{
  "hash": "397fee7dc405b6026ff61033e40e3958",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Not-so-basic base R functions\"\ndate: \"2022-11-13\"\ncategories: [\"reference\"]\ndescription: \"There are so many goodies in base R. Let's explore some functions you may not know.\"\nimage: thumbnail.jpg\nimage-alt: \"Leonetto Cappiello, Benedictine.\"\nfilters:\n  - webr\n---\n\n\n![Leonetto Cappiello, Benedictine](thumbnail-wide.jpg){fig-alt=\"A man in red clothes holding up a latern at a window, overlooking a city.\"}\n\nR is a popular programming language known for its versatility and extensive collection of packages. As of the publishing of this post, there are over 23 thousand packages on [R-universe](https://r-universe.dev/search/). But what if I told you that you could do some pretty amazing things without loading any packages at all?\n\nIn this blog post, I will explore a few of my favorite not-so-basic base R functions using [webR](https://docs.r-wasm.org/webr/latest/). Click 'Run code' to see them in action!\n\n![](https://media.tenor.com/no6cN-AO0HcAAAAC/basic.gif){fig-align=\"center\"}\n\n::: {.callout-note}\nSome of these functions are not from base R but from [stats](https://stat.ethz.ch/R-manual/R-devel/library/stats/html/00Index.html), which is also imported when you open up R.\n:::\n\n* [invisible()](#invisible): Return a temporarily invisible copy of an object\n\n## 1. invisible()\n\nThe `invisible()` function \"returns a temporarily invisible copy of an object\". Below, we have examples where the functions return their argument, but one does so invisibly.\n\n::: {.column-margin}\n**Resources**\n\n* [invisible documentation](https://rdrr.io/github/robertzk/monadicbase/man/invisible.html)\n* [StackOverflow discussion](https://stackoverflow.com/questions/11653127/what-does-the-function-invisible-do)\n* [Tidyverse design guide](https://design.tidyverse.org/out-invisible.html)\n:::\n\n```{webr-r}\nf1 <- function(x) x\nf1(\"This prints\")\n```\n\n\n```{webr-r}\nf2 <- function(x) invisible(x)\nf2(\"This does not print\")\n```\n\nThe way to see invisible output is by saving to a variable or running `print()`. Both of the below will print:\n\n```{webr-r}\na <- f2(\"This is a saved variable\")\na\n\nprint(f2(\"This is print()\"))\n```\n\nIf you're writing functions, then `invisible()` can be very helpful. In fact, many of your favorite functions use `invisible()`. For example, `readr::write_csv()` [invisibly returns](https://github.com/tidyverse/readr/blob/e4d640ace3bb6ae095a1114158854a38a1da3a30/R/write.R#L214) the data frame that was saved.\n\n* In the example below, using {purrr} and `tidytab::tab_run()` together results in two `NULL` list items that I do not need. \n\n```{webr-r}\n#| warning: false\nwebr::install(\"purrr\")\nwebr::shim_install()\ninstall.packages(\"tidytab\", repos = c(\"https://gvelasq.r-universe.dev\", \"https://repo.r-wasm.org\"))\n\nlibrary(purrr)\nlibrary(tidytab)\n\ndat <-\n  tibble::tibble(\n    col1 = c(3, 2, 2, 1, 2, 1),\n    col2 = c(1, 2, 1, 1, 3, 2),\n    ct = c(2, 2, 2, 2, 2, 2)\n  )\n\nvars <- c(\"col1\", \"col2\")\n\n# Install from devtools::install_github(\"gvelasq/tidytab\")\ntab_run <- function(.x){\n  dat %>%\n    tidytab::tab2(all_of(.x), \"ct\")\n}\n\npurrr::map(.x = vars,\n           .f = tab_run)\n```\n\nRunning `invisible()` eliminates that!\n\n```{webr-r}\ninvisible(purrr::map(.x = vars,\n                     .f = tab_run))\n```\n\n* When writing a function, R can print a lot of stuff implictly. Per the [Tidyverse design guide](https://design.tidyverse.org/out-invisible.html), \"if a function is called primarily for its side-effects, it should invisibly return a useful output\".\n\nThis is useful for generating intermediate diagnostics or for saving multiple output formats. <!--add more-->\n\n## 2. noquote\n\nThe `noquote()` function \"prints character strings without quotes.\" \n\n::: {.column-margin}\n**Resources**\n\n* [noquote documentation](https://www.educative.io/answers/what-is-the-noquote-function-in-r)\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(\"This is the print() function\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"This is the print() function\"\n```\n\n\n:::\n\n```{.r .cell-code}\npaste(\"This is the paste() function\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"This is the paste() function\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# implementing the noquote() function \n\nnoquote(\"This is the noquote() function\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] This is the noquote() function\n```\n\n\n:::\n:::\n\n\n## 3. coplot\n\n\n\nsplit\n\nencodeString\n\nnzchar\n\nfile.choose()\n\nlengths\n\nwith",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}