{
  "hash": "06c2854fea5573ecde3be6d0b3aad6fa",
  "result": {
    "markdown": "---\ntags: [\"visualize\"]\ndate: \"2021-05-09\"\ntitle: \"Getting started in #rtistry\"\nimage: thumbnail.jpg\ndescription: Generative art mixes randomness and order to create beautiful images. The \\#rtistry package helps find work from other Rtists.\n---\n\n![E. A. SÃ©guy, Vintage flower patterns (1925)](thumbnail-wide.jpg){fig-alt=\"Abstract pink flowerswith red centers on a background of an orange spiral with brown background\"}\n\nArtists in the R community have been using the [`#rtistry`](https://twitter.com/hashtag/rtistry) hashtag to demonstrate their gorgeous, dynamic art using only the R programming language. Their creations are amazing and they inspired me to try out generative art this dreary Sunday.\n\nI am proud to showcase my first #rtistry plot ever! Kinda reminds me of [KidPix](https://www.reddit.com/r/nostalgia/comments/66s0hc/kid_pix/) (remember KidPix?!). I wanted to share how I did it and welcome any feedback or advice, as this is totally new and I'm not even sure if I am doing it right?\n\n<center>\n![Final image](rtistry2.png){fig-alt=\"Generative art showing a repeated parametric equation\"}\n</center>\n<br>\nAs always, we start with the packages we will use:\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load packages\nlibrary(tidyverse)\nlibrary(viridis)\nlibrary(ggdark)\n```\n:::\n\n## Write a parametric equation\n\nFirst up is figuring out the function you will use to create the plot. I decided to go with a parametric equation for my first `#rtistry` plot. A parametric equation of a curve expresses the coordinates of points of the curve as functions of a variable. [This blog post](https://lifethroughamathematicianseyes.wordpress.com/2014/11/13/parametric-equations/) explains the concept very clearly and also has various examples of wonderful parametric equations.\n\nWhy parametric equations? First, even simple equations can create beautiful symmetries. Second, they are easy to modify to find the *perfect* plot.\n\nThe simplest parametric equation uses cosine and sine to make the unit circle:\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncircleFun <- function(center = c(0, 0), diameter = 1, npoints = 100){\n    r = diameter / 2\n    tt <- seq(0,2*pi,length.out = npoints)\n    xx <- center[1] + r * cos(tt)\n    yy <- center[2] + r * sin(tt)\n    return(data.frame(x = xx, y = yy))\n}\n\ndat <- \n  circleFun(c(1, -1), 2.3, npoints = 100)\n\nggplot(dat,aes(x, y)) +\n  geom_path()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){fig-align='center' fig-alt='Circle plot' width=672}\n:::\n:::\n\nLet's write a function to create a parametric equation. I based this equation on the aforementioned blog post equations. The parameters are:\n\n* center: the center of the equation\n* npoints: the number of points used to evaluate the function.\n* c1, c2, c3, c4: the coefficients for the equation\n\n::: {.cell}\n\n```{.r .cell-code}\ngenFun <- function(center = c(0, 0), npoints = 500, c1 = 2.5, c2 = -5, c3 = 4.28, c4 = 2.3){\n    t <- seq(0, 2*pi, length.out = npoints)\n    xx <- center[1] + c1*(sin(c2*t)*sin(c2*t))*(2^cos(cos(c3*c4*t)))\n    yy <- center[2] + c1*sin(sin(c2*t))*(cos(c3*c4*t)*cos(c3*c4*t))\n    a <- data.frame(x = xx, y = yy)\n    \n    return(a)\n}\n```\n:::\n\nPlaying around with the function, we see how the graph gets smoother with more points and how the shape changes with different coefficients.\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndat <- \n  genFun(c(1,-1), npoints = 100)\n\nggplot(dat, aes(x, y)) +\n  geom_path()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){fig-align='center' fig-alt='Different shapes of a parametric equation' width=672}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndat <- \n  genFun(c(1,-1), npoints = 500, c1 = 5, c2 = -3, c3 = 5, c4 = 2)\n\nggplot(dat, aes(x, y)) +\n  geom_path()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){fig-align='center' fig-alt='Different shapes of a parametric equation' width=672}\n:::\n:::\n\n## Create variation within the graph\n\nNow that we have a basic shape, let's play around with different aspects of the graph:\n\n* geoms\n* Aesthetic specifications\n* Repetition\n\n### geoms\n\nWe started off with `geom_path` but can play around with other geoms too. Here it is with `geom_line`:\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndat <- \n  genFun(c(1,-1), npoints = 5000)\n\nggplot(dat, aes(x, y)) +\n  geom_line()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){fig-align='center' fig-alt='Parametric equation with an abstract look' width=672}\n:::\n:::\n\nAnd with `geom_point`:\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nset.seed(1234)\n\ndat <- \n  genFun(c(1,-1), npoints = 500)\n\ndat %>% \n  ggplot(aes(x, y)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-14-1.png){fig-align='center' fig-alt='Parametric equation with dots' width=672}\n:::\n:::\n\n### Aesthetic specifications\n\nThe {ggplot2} package has several aesthetic specifications available for plots. A full list can be found [here](https://ggplot2.tidyverse.org/articles/ggplot2-specs.html).\n\nWe're going to go ahead and get rid of all the background using `theme_void()`.\n\n#### Size\n\nLet's go with `geom_point`. In this case, we can start playing around with the aesthetics to see what would look interesting. With `geom_point`, you can edit the sizes of the points, so we create a column with random point sizes to create some variation.\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nset.seed(1111)\n\ndat <- \n  genFun(c(1,-1), npoints = 5000) %>% \n  mutate(rand_w = sample(n())/3000)\n\ndat %>% \n  ggplot(aes(x, y)) +\n  geom_point(size = dat$rand_w) +\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-16-1.png){fig-align='center' fig-alt='Parametric equation with dots closer together' width=672}\n:::\n:::\n\n#### Shape\n\nWe could also change the shape of each of the points, but I liked the circles more:\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndat %>% \n  ggplot(aes(x, y)) +\n  geom_point(size = dat$rand_w,\n             shape = 8) +\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-18-1.png){fig-align='center' fig-alt='Parametric equation with xes instead of dots' width=672}\n:::\n:::\n\n#### Opacity\n\nWe could also change the opacity of the points:\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nset.seed(1234)\n\ndat <- \n  dat %>% \n  mutate(rand_o = sample(n())/5000)\n\ndat %>% \n  ggplot(aes(x, y)) +\n  geom_point(size = dat$rand_w,\n             alpha = dat$rand_o) +\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-20-1.png){fig-align='center' fig-alt='Parametric equation with mixed opacity' width=672}\n:::\n:::\n\n#### Color\n\nWe can also create a column for random numbers to ascribe colors to each point. I decided to use the magma color palette from the {viridis} package because it is so vibrant. Now that we're not using only black points, we can use `dark_theme_void()` from the {ggdark} package for a fully black background.\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nset.seed(1234)\n\ndat <- \n  dat %>% \n  mutate(rand_c = sample(n()))\n\ndat %>% \n  ggplot(aes(x, y,  color = rand_c)) +\n  geom_point(size = dat$rand_w,\n             alpha = dat$rand_o) +\n  scale_color_viridis(option = \"magma\") +\n  dark_theme_void() +\n  theme(legend.position = \"none\") # remove legend\n```\n\n::: {.cell-output-stderr}\n```\nInverted geom defaults of fill and color/colour.\nTo change them back, use invert_geom_defaults().\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-22-1.png){fig-align='center' fig-alt='Parametric equation with various colors on a black background' width=672}\n:::\n:::\n\n### Repetition\n\nNotice we added `rand_w`, `rand_o`, and `rand_c` so that we can randomly change up the size, opacity, and color of the plot. Let's go back to our original generative function and them as parameters. Now we can change them without having to add them to the data frame externally from the function. (Apologies for the switching back and forth from dplyr to base R!)\n\n::: {.cell}\n\n```{.r .cell-code}\ngenFun <- function(center = c(0, 0), npoints = 500, c1 = 2.5, c2 = -5, c3 = 4.28, c4 = 2.3, size_denom = 1, opacity_denom = 1, color_denom = 1){\n    t <- seq(0, 2*pi, length.out = npoints)\n    xx <- center[1] + c1*(sin(c2*t)*sin(c2*t))*(2^cos(cos(c3*c4*t)))\n    yy <- center[2] + c1*sin(sin(c2*t))*(cos(c3*c4*t)*cos(c3*c4*t))\n    rand_w <- sample(0:20, npoints, replace = TRUE)/size_denom\n    rand_o <- sample(1:100, npoints, replace = TRUE)/opacity_denom\n    rand_c <- sample(1:100, npoints, replace = TRUE)/color_denom\n    a <- data.frame(x = xx, y = yy, rand_w = rand_w, rand_o = rand_o, rand_c = rand_c)\n    \n    return(a)\n}\n```\n:::\n\nNow playing around with the new parameters, I decided to go with this plot:\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nset.seed(1111)\n\ndat <- \n  genFun(c(0, 0), npoints = 5000, c1 = 5, c2 = -3, c3 = 5, c4 = 2, size_denom = 1.5, opacity_denom = 50)\n\ndat %>% \n  ggplot(aes(x, y,  color = rand_c)) +\n  geom_point(size = dat$rand_w,\n             alpha = dat$rand_o) +\n  scale_color_viridis(option = \"magma\") +\n  dark_theme_void() +\n  theme(legend.position = \"none\") # remove legend\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-26-1.png){fig-align='center' fig-alt='Parametric equation with varying dot sizes and colors repeated around the center' width=672}\n:::\n:::\n\nWhat this allows us to do is change up the generative function and build on our plot. I was interested in rotating the plot around the axis.\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndat %>% \n  ggplot() +\n  geom_point(aes(x, y,  color = rand_c),\n             size = dat$rand_w,\n             alpha = dat$rand_o) +\n  geom_point(aes(-x, -y,  color = rand_c),\n             size = dat$rand_w,\n             alpha = dat$rand_o) +\n  geom_point(aes(-y, x,  color = rand_c),\n             size = dat$rand_w,\n             alpha = dat$rand_o) +\n  geom_point(aes(-y, -x,  color = rand_c),\n             size = dat$rand_w,\n             alpha = dat$rand_o) +\n  scale_color_viridis(option = \"magma\") +\n  dark_theme_void() +\n  theme(legend.position = \"none\") # remove legend\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-28-1.png){fig-align='center' width=672}\n:::\n\n```{.r .cell-code}\n# ggsave(here::here(\"public\", \"img\", \"rtistry2.png\"), dpi = 320, height = 6, width = 8) + # this sames the image\n```\n:::\n\nTada! My first ever #rtistry plot.\n\n## Conclusion\n\nThis was my attempt to create generative art in R! It was fun to figure out how on earth to even get started and see how the plots change with new parameters on different attempts. I welcome any thoughts and please share your art using the #rtistry hashtag with [me](https://twitter.com/ivelasq3)!\n\n### rtists I follow\n\n* [Danielle Navarro](https://twitter.com/djnavarro)\n* [Ijeamaka A](https://twitter.com/ijeamaka_a)\n* [Georgios Karamanis](https://twitter.com/geokaramanis)\n* [Tobias Stalder](https://twitter.com/toeb18)\n\n### Packages for creating generative art\n\n* djnavarro's [flametree](https://github.com/djnavarro/flametree)\n* ijeamaka_a's [contourR](https://github.com/Ijeamakaanyene/contouR)\n* cutterkom's [generativeart](https://github.com/cutterkom/generativeart)\n\n<center>\n*Liked this article? I'd love for you to retweet!*\n\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">New post! ð£ Interested in using <a href=\"https://twitter.com/hashtag/rstats?src=hash&amp;ref_src=twsrc%5Etfw\">#rstats</a> to create KidPix-like <a href=\"https://twitter.com/hashtag/generativeart?src=hash&amp;ref_src=twsrc%5Etfw\">#generativeart</a> ð¨ ? Check out my first foray into <a href=\"https://twitter.com/hashtag/rtistry?src=hash&amp;ref_src=twsrc%5Etfw\">#rtistry</a> using a parametric equation here! ð©ð»âð¨ <a href=\"https://t.co/ykkddoK5tm\">https://t.co/ykkddoK5tm</a><br><br>reposted due to typo ð <a href=\"https://t.co/V5bFSvDsOR\">pic.twitter.com/V5bFSvDsOR</a></p>&mdash; Isabella VelÃ¡squez (@ivelasq3) <a href=\"https://twitter.com/ivelasq3/status/1391947964013285379?ref_src=twsrc%5Etfw\">May 11, 2021</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script> \n</center>",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": [],
    "engineDependencies": {},
    "preserve": {},
    "postProcess": null
  }
}