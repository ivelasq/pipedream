{
  "hash": "64a7287e83e7c48803be48fc7809c441",
  "result": {
    "markdown": "---\ntitle: Three packages that port the tidyverse to Python\ndate: '2022-05-09'\ncategories:\n  - reference\ndescription: Working in Python but miss tidyverse syntax? These packages can help.\nimage: thumbnail.jpg\nimage-alt: >-\n  Johannes Vermeer, The Allegory of Painting, a woman holding an instrument at a\n  window and a man turned away from us painting her\n---\n\n![Johannes Vermeer, The Allegory of Painting (1666)](thumbnail-wide.jpg){fig-alt=\"A woman holding an instrument while a man who is facing away from us paints her, the room has luxurious decorations.\"}\n\nAs I've been saying every year for the past seven years or so, I am learning Python. (It's been a journey.)\n\nPython packages like pandas have several ways to work with data. There are several options for indexing, slicing, etc. They have a lot of flexibility but also a lot of conventions to remember.\n\nI am familiar with the grammar of the [tidyverse](https://www.tidyverse.org/), which provides a consistent set of verbs to solve common data manipulation challenges. I investigated ways to port tidyverse-like verbs to Python (hopefully making Python a little easier to grasp).\n\nHere are three packages that do just that.\n\n## siuba\n\nThe [siuba](https://github.com/machow/siuba) package, created by [Michael Chow](https://twitter.com/chowthedog), allows you to use dplyr-like syntax with pandas. Siuba ports over several functions, including `select()`, `filter()`, `mutate()`, `summarize()`, and `arrange()`. The package also allows you to use `group_by()` and a `>>` pipe.\n\nLet's check out a few examples using the palmerpenguins dataset ([R](https://allisonhorst.github.io/palmerpenguins/), [Python](https://github.com/mcnakhaee/palmerpenguins)).\n\n::: {.panel-tabset}\n## Python\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nfrom palmerpenguins import load_penguins\npenguins = load_penguins()\nfrom siuba import group_by, summarize, _\n\n(penguins\n  >> group_by(_.species)\n  >> summarize(n = _.species.count())\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>species</th>\n      <th>n</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Adelie</td>\n      <td>152</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Chinstrap</td>\n      <td>68</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Gentoo</td>\n      <td>124</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## R\n``` r\nlibrary(palmerpenguins)\nlibrary(dplyr)\n\n(penguins %>% \n    group_by(species) %>%\n    summarize(n = n()))\n```\n```\n# A tibble: 3 × 2\n  species       n\n  <fct>     <int>\n1 Adelie      152\n2 Chinstrap    68\n3 Gentoo      124\n```\n:::\n\nThanks to the [documentation](https://siuba.readthedocs.io/en/latest/) and [interactive tutorials](https://learn.siuba.org/intro-data-science/01) available for siuba, it's easy to see the parallels and differences with dplyr so that you can craft these functions yourself. \n\n::: {.panel-tabset}\n## Python\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nfrom palmerpenguins import load_penguins\npenguins = load_penguins()\nfrom siuba import select\n\n(penguins\n  >> select(-_.isalpha(), _.species)\n  >> group_by(_.species)\n  >> summarize(\n      bill_length_mm = _.bill_length_mm.mean(),\n      bill_depth_mm = _.bill_depth_mm.mean(),\n      flipper_length_mm = _.flipper_length_mm.mean(),\n      body_mass_g = _.body_mass_g.mean()\n  )\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>species</th>\n      <th>bill_length_mm</th>\n      <th>bill_depth_mm</th>\n      <th>flipper_length_mm</th>\n      <th>body_mass_g</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Adelie</td>\n      <td>38.791391</td>\n      <td>18.346358</td>\n      <td>189.953642</td>\n      <td>3700.662252</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Chinstrap</td>\n      <td>48.833824</td>\n      <td>18.420588</td>\n      <td>195.823529</td>\n      <td>3733.088235</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Gentoo</td>\n      <td>47.504878</td>\n      <td>14.982114</td>\n      <td>217.186992</td>\n      <td>5076.016260</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## R\n``` r\n(penguins %>%\n  group_by(species) %>%\n  summarize(across(!where(is.character), mean, na.rm = TRUE)))\n```\n```\n# A tibble: 3 × 8\n  species   island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  <fct>      <dbl>          <dbl>         <dbl>             <dbl>       <dbl>\n1 Adelie        NA           38.8          18.3              190.       3701.\n2 Chinstrap     NA           48.8          18.4              196.       3733.\n3 Gentoo        NA           47.5          15.0              217.       5076.\n# … with 2 more variables: sex <dbl>, year <dbl>\n```\n:::\n\n## plotnine\n\nThe [plotnine](https://github.com/has2k1/plotnine) package, created by [Hassan Kibirige](https://twitter.com/HKibirige), lets you use a grammar of graphics for Python.\n\nYou can use siuba and plotnine together, similar to how you would use dplyr and ggplot2 together.\n\n::: {.cell dpi='300' execution_count=3}\n``` {.python .cell-code}\nfrom siuba import *\nfrom plotnine import *\nfrom palmerpenguins import load_penguins\npenguins = load_penguins()\n\n(penguins\n # using siuba pipe\n >> ggplot(aes(x = 'flipper_length_mm', y = 'body_mass_g'))\n # creating plotnine plot\n  + geom_point(aes(color = 'species', shape = 'species'),\n             size = 3,\n             alpha = 0.8)\n  + theme_minimal()\n  + labs(title = \"Penguin size, Palmer Station LTER\",\n         subtitle = \"Flipper length and body mass for Adelie, Chinstrap, and Gentoo Penguins\",\n        x = \"Flipper length (mm)\",\n        y = \"Body mass (g)\",\n        color = \"Penguin species\",\n        shape = \"Penguin species\"))\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-4-output-1.png){}\n:::\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n<ggplot: (318908398)>\n```\n:::\n:::\n\n\nFolks have [heuristics](https://datascienceworkshops.com/blog/heuristics-for-translating-ggplot2-to-plotnine/) to translate ggplot2 code to plotnine. These help understand the nuances between the two.\n\n## pyjanitor\n\nOne more package that uses tidyverse-like verbs is [pyjanitor](https://github.com/pyjanitor-devs/pyjanitor), which ports the [janitor](https://github.com/sfirke/janitor) package by [Sam Firke](https://twitter.com/samfirke) (please note that the janitor package is not part of the tidyverse). With pyjanitor, you can clean column names, identify duplicate entries, and more.\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nfrom janitor import clean_names\nimport pandas as pd\nimport numpy as np\n\nexample_df = {\n    'Terrible Name 1': ['name1', 'name2', 'name3', 'name4'],\n    'PascalCase': [150.0, 200.0, 300.0, 400.0],\n    'this_has_punctuation?': [np.nan, np.nan, np.nan, np.nan],\n}\n\npd.DataFrame.from_dict(example_df).clean_names()\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>terrible_name_1</th>\n      <th>pascalcase</th>\n      <th>this_has_punctuation_</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>name1</td>\n      <td>150.0</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>name2</td>\n      <td>200.0</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>name3</td>\n      <td>300.0</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>name4</td>\n      <td>400.0</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nPandas allows you to [method chain](https://tomaugspurger.github.io/method-chaining.html) with [pipes](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.pipe.html). They can be used with pyjanitor, as well.\n\n::: {.cell dpi='300' execution_count=5}\n``` {.python .cell-code}\nfrom janitor import clean_names, remove_empty\nimport pandas as pd\nimport numpy as np\n\nexample_df = {\n    'Terrible Name 1': ['name1', 'name2', 'name3', 'name4'],\n    'PascalCase': [150.0, 200.0, 300.0, 400.0],\n    'this_has_punctuation?': [np.nan, np.nan, np.nan, np.nan],\n}\n\n(pd.DataFrame.from_dict(example_df)\n    .pipe(clean_names)\n    .pipe(remove_empty)\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>terrible_name_1</th>\n      <th>pascalcase</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>name1</td>\n      <td>150.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>name2</td>\n      <td>200.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>name3</td>\n      <td>300.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>name4</td>\n      <td>400.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Conclusion\n\nWhile Python syntax and conventions are still on my \"to-learn\" list, it is helpful to know there are packages that can bring the familiarity of the tidyverse to Python.\n\n### Additional resources\n\nI came across other packages that port the tidyverse to Python. I didn't investigate them deeply but wanted to share in case they are helpful.\n\n* [tidypandas](https://github.com/talegari/tidypandas)\n* [plydata](https://github.com/has2k1/plydata)\n* [tidypolars](https://github.com/markfairbanks/tidypolars)\n* [datar](https://github.com/pwwang/datar)\n\nIf you recommend these packages or know of others, please let me know on Twitter!\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}