{
  "hash": "e7b0685e922b8cb0db11f4f0771c0829",
  "result": {
    "markdown": "---\ntitle: \"Creating a dataset from an image using reticulate in R Markdown\"\ndate: 2021-09-28\ncategories: [\"python\", \"visualize\"]\ndescription: I ran into a cool paper where the authors create a dataset from an image with a Python package and then plot it with ggplot2. We can do that in a single R Markdown file thanks to the reticulate package.\nimage: thumbnail.jpg\nimage-alt: \"Henri Rousseau, Virgin Forest with Sunset of a jungle with green trees and a red sun.\"\n---\n\n![Henri Rousseau, Virgin Forest with Sunset (1910)](thumbnail-wide.jpg){fig-alt=\"Jungle with green trees and a red sun\"}\n\nLast week, a paper started making the Twitter rounds. [Selective attention in hypothesis-driven data analysis](https://www.biorxiv.org/content/10.1101/2020.07.30.228916v1.full.pdf) by Professors Itai Yanai and Martin Lerche looked into whether providing specific hypotheses prevented students from fully exploring a dataset. The authors artificially created a dataset that, when plotted, clearly showed the outline of a cartoon gorilla.\n\n<center>\n![](main.png){fig-alt=\"Cartoon gorilla and its recreation in ggplot2\"}\n</center>\n\nI will leave you to read the paper to find out the results but something that interested me was the dataset created from the image. The authors mentioned that they used a Python function called 'getpixel', manipulated the dataset into groups, and plotted it in {ggplot2}. I am learning the [{reticulate}](https://rstudio.github.io/reticulate/) package which allows R to interface with Python and thought this would be a fun exercise to try.\n\nWith that, let's recreate this dataset entirely within R Markdown! In addition to being able to copy/paste the code below, I have also provided it as a project on [RStudio Cloud](https://rstudio.cloud/project/2949291) if you'd like to run the whole thing at once.\n\n## Install packages\n\nFirst up is installing the R packages:\n\n````\n```{r}\n# Install packages if not already installed\n# install.packages(c(\"tidyverse\", \"reticulate\"))\nlibrary(tidyverse)\nlibrary(reticulate)\n```\n````\n\nIn your project, create a folder called \"image\". Save the image you would like to convert to a dataset in that folder. To recreate this paper's dataset, go to [this](https://classroomclipart.com/clipart-view/Clipart/Black_and_White_Clipart/Animals/gorilla-waving-cartoon-black-white-outline-clipart-914_jpg.htm) page and download the cartoon gorilla.\n\nThe paper mentions the 'getpixel' function. With a bit of digging, we find that is from the package `pillow` (a fork from a package called `PIL`). Like in R, we need to install the package. In an R Markdown document, I run the functions from {reticulate} below.\n\n````\n```{r}\nuse_python(\"/usr/local/bin/python\")\n# If you haven't installed Python, the line below will prompt you!\npy_install(\"pillow\")\n```\n````\n\nSince {reticulate} is the package that allows you to call Python, if you do not have Python installed, then you will get a message (which you would reply Y to):\n\n```\nNo non-system installation of Python could be found.\nWould you like to download and install Miniconda?\nMiniconda is an open source environment management system for Python.\nSee https://docs.conda.io/en/latest/miniconda.html for more details.\n```\n\n## Create coordinates\n\n[This](https://stackoverflow.com/questions/58398300/find-all-coordinates-of-black-grey-pixels-in-image-using-python) Stack Overflow thread was very helpful to determine what we need to do with the 'getpixel' function in `pillow`. Again, like in R, we need to call the functions we need but this time, we are doing it in a `python` chunk.\n\n````\n```{python}\nimport numpy as np\nfrom PIL import Image\n```\n````\n\nThen, we point to the image and create coordinates pixels for the outline of the cartoon. We can set a threshold level for which pixels to keep/discard.\n\n````\n```{python}\n# Thanks to Bart Huntley for pointing out a typo previously in this chunk!\nim = Image.open(\"/cloud/project/image/gorilla.jpg\")\npixels = np.asarray(im)\n\n# Set threshold level\nthreshold_level = 50\n\n# Find coordinates of all pixels below threshold\ncoords = np.column_stack(np.where(pixels < threshold_level))\n```\n````\n\n## Bring back into R\n\nThis results in a NumPy ndarray called `coords` that contains the coordinates of the pixels of the outline. That's great but... it's in Python! How do we bring it back into R?\n\nThe [{reticulate} Cheat Sheet](https://ugoproto.github.io/ugo_r_doc/pdf/reticulate.pdf) was very helpful in figuring this out. The section \"Python in R Markdown\" shows that you can use the `py` object to access objects created in Python chunks from R chunks.\n\n<center>\n![Python Cheatsheet](Screen Shot 2021-09-27 at 11.40.55 PM.png){fig-alt=\"Python in R Markdown cheat sheet\"}\n</center>\n</center>\n\nKnowing that, we can create an R object from coords using `py`. Next, we follow the steps outlined in the paper for the data preparation.\n\n````\n```{r}\ncoords <-\n  as.data.frame(py$coords) %>%\n  sample_n(1768) %>%\n  mutate(bmi = V2 * 17 + 15,\n         steps = 15000 - V1 * 15000/max(V1)) %>%\n  mutate(randvar = rnorm(n(), mean = 0, sd = 10),\n         randi = steps * (1 + randvar),\n         gender = case_when(randi < median(steps) ~ \"Female\",\n                            TRUE ~ \"Male\"))\n```\n````\n\nIf we'd like to see the distribution of data by male/female, we can use `count()`.\n\n````\n```{r}\ncoords %>%\n  count(gender)\n```\n````\n\n## Create plots\n  \nNow for the fun part - visualizing the plots (spoiler: one should always do this before starting an analysis)!\n\n````\n```{r}\ncoords %>%\n  ggplot(aes(x = bmi,\n              y = steps)) +\n  geom_point() +\n  theme_void() +\n  xlim(0, 15000)\n```\n````\n\n<center>\n![](index.png){fig-alt=\"ggplot2 image of pixel cartoon gorilla\"}\n</center>\n\n````\n```{r}\ncoords %>%\n  ggplot(aes(x = bmi,\n             y = steps,\n             color = gender)) +\n  geom_point() +\n  theme_void() +\n  xlim(0, 15000)\n```\n````\n\nWith that, we've seamlessly gone from Python to R and created a dataset leveraging the power of both languages. Thanks to Professors Yanai and Lerche for their publication!\n\n<center>\n![](index2.png){fig-alt=\"ggplot2 image of pixel cartoon gorilla with random dots colored by gender\"}\n</center>\n\n<center>\n*Liked this post? I'd love for you to retweet!*\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">Did you see the paper where a dataset was created from a cartoon and thought, how do I create that using <a href=\"https://twitter.com/hashtag/rstats?src=hash&amp;ref_src=twsrc%5Etfw\">#rstats</a>? This blog post walks through using reticulate to use <a href=\"https://twitter.com/hashtag/Python?src=hash&amp;ref_src=twsrc%5Etfw\">#Python</a> and ggplot2 in the same R markdown notebook üòéüêç <a href=\"https://t.co/4CbXzRd3PN\">https://t.co/4CbXzRd3PN</a> <a href=\"https://t.co/Kq4WsaKHMk\">pic.twitter.com/Kq4WsaKHMk</a></p>&mdash; Isabella Vel√°squez (@ivelasq3) <a href=\"https://twitter.com/ivelasq3/status/1443216191858769922?ref_src=twsrc%5Etfw\">September 29, 2021</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script> \n</center>",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": [],
    "engineDependencies": {},
    "preserve": {},
    "postProcess": null
  }
}