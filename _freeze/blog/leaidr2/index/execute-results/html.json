{
  "hash": "a34684431048e426ab0970eefa33ad3d",
  "result": {
    "markdown": "---\ncategories: [\"package-development\", \"maps\", \"shiny\"]\ndescription: Thanks to contributions from Daniel Anderson, leaidr is even easier to use.\ndate: \"2020-08-30\"\nimage: thumbnail.jpg\ntitle: \"An even easier-to-use R package for school district shapefiles\"\n---\n\n![Piet Mondrian, Tableau No. 2/Composition No. VII (1913)](thumbnail-wide.jpg)\n\n## An update to leaidr\n\nA few months ago, I created [{leaidr}](https://github.com/ivelasq/leaidr) for easier download of U.S. school district shapefiles. [Daniel Anderson](https://github.com/datalorax) went through and greatly improved the package,  making it even easier to download and use the shapefiles (thanks Dan!).\n\nNow, instead of having to run `lea_prep()`, you can download the shapefiles from Dan's Github repository like so:\n\n::: {.cell layout-align=\"center\" hash='index_cache/html/unnamed-chunk-2_39a8649a452d2d0a34547b5043cdf2e4'}\n\n```{.r .cell-code}\nlibrary(leaidr)\n\ntn <- lea_get(\"tn\")\n```\n\n::: {.cell-output-stdout}\n```\nOGR data source with driver: ESRI Shapefile \nSource: \"/private/var/folders/pj/nmg9b8_93dq4kwt8nt2d4cj40000gn/T/RtmpqlCmYd/47\", layer: \"47\"\nwith 158 features\nIt has 18 fields\n```\n:::\n\n```{.r .cell-code}\ntn %>% \n  sf::st_as_sf() %>% \n  ggplot2::ggplot() +\n  ggplot2::geom_sf()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){fig-align='center' fig-alt='Blank map of Tennessee school districts.' width=672}\n:::\n:::\n\nAnd, if you use `lea_get()` (i.e., with `state = NULL`), you'll get the shapefiles for the whole U.S. back via ROpenSci’s {piggyback}.\n\nSo much easier and better!\n\nBecause Dan helped make the package so great, I wanted to add on and showcase what can be done with it! So, today's post is jam-packed with choices...\n\n* [Create a beautiful map in Mapbox](#create-a-beautiful-map-in-mapbox)\n* [Create a Shiny app with your beautiful  map](#create-a-shiny-app-with-your-beautiful-map)\n* [Add a Shiny app to a package](#add-a-shiny-app-to-a-package)\n\n## Create a beautiful map in Mapbox\n\nAsmae Toumi wrote a [blog post](https://asmae-toumi.netlify.app/posts/2020-08-10-how-to-make-web-ready-us-county-level-maps/) on how to make maps using R and Mapbox. So, I figured: why not announce the new and improved {leaidr} functions to create a beautiful Mapbox map??\n\nThis walkthrough will go a little deeper with Mapbox, as I am an extreme beginner and had to do a lot of investigating to figure out how to use it.\n\nI suggest first reading through Asmae's tutorial as there are a few things you need to do before being able to run the below: download the {mapboxapi} package, create a Mapbox account, and install Tippecanoe.\n\n### Load the packages\n\nHere are the packages you will need:\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\n# remotes::install_github(\"walkerke/mapboxapi\")\nlibrary(mapboxapi)\n\n# if you haven't installed the package yet\n# devtools::install_github(\"ivelasq/leaidr\")\nlibrary(leaidr)\n\nlibrary(rmapshaper)\nlibrary(mapdeck)\n```\n:::\n\n### Download the data\n\nDownload your shapefiles. If you want to make a choropleth map, also read in the data that you will append to your shapefiles and merge them by a common ID. (Sorry for using a local file!)\n\n::: {.cell}\n\n```{.r .cell-code}\nshp <- # leaidr shapefiles\n  lea_get(c(\"or\", \"wa\")) %>% \n  sf::st_as_sf()\n\ndat <- # data to append \n  read_csv(\"/Users/shortessay/Downloads/ccd_lea_141_1819_l_1a_091019/ccd_lea_141_1819_l_1a_091019.csv\") %>%\n  filter(ST %in% c(\"OR\", \"WA\"))\n\nnorthwest <-\n  shp %>%\n  select(GEOID, geometry) %>%\n  sp::merge(dat, by.x = \"GEOID\", by.y = \"LEAID\")\n```\n:::\n\n### Create the tileset\n\nNow, following the original tutorial, we use Tippecanoe to optimize the shapefiles and data and then upload the \"tiles\" to Mapbox.\n\n::: {.cell}\n\n```{.r .cell-code}\ntippecanoe(\n  input = northwest,\n  output = \"nw.mbtiles\",\n  layer_name = \"northwest\")\n\nupload_tiles(input = \"nw.mbtiles\",\n             username = \"ivelasq3\", \n             tileset_id = \"northwest\",\n             multipart = TRUE)\n```\n:::\n\n### Style the tiles\n\nThis is the part that I had to figure out on the Mapbox website. [This](https://docs.mapbox.com/help/tutorials/choropleth-studio-gl-pt-1/) walkthrough was helpful. Once you have uploaded the tiles using `upload_tiles()`, you should see them available under \"Custom tileset\" at the bottom of this webpage: https://studio.mapbox.com/tilesets/.\n\n![Screenshot of Mapbox website with Tilesets](1.png)\n\nThen, go to Styles on this webpage: https://studio.mapbox.com/. Click \"New Style\" and choose the template you want, then Customize. \n\n![Screenshot of Mapbox choosing a template](2.png)\n\nTo add your tileset, go to Layers, click the Plus sign, then under \"Source\", find your uploaded tileset, or add the tileset by the ID given by `upload_tiles()`.\n\n![Screenshot of Mapbox layers and how to add them](3.png)\n\nI zoomed to where my tiles are located (Oregon and Washington) and started editing. [This section of the walkthrough](https://docs.mapbox.com/help/tutorials/choropleth-studio-gl-pt-1/#data-driven-styling) explains how to create a choropleth map, where each geography has a different color according to a value.\n\nOnce done styling, I clicked \"Publish\" on the top right of Mapbox Studio.\n\n### Using the map in R\n\nTo get the information to bring it back into R and be able to use the map in a Shiny app, I clicked \"Share\" and scrolled to find the Style ID.\n\n![Screenshot of Mapbox sharing a map](4.png)\n\nI copied the Share URL to include in the function below. For the location parameter, I used the latitude/longitude listed in the browser URL. I played around with the zoom level until I found one I liked.\n\n::: {.cell}\n\n```{.r .cell-code}\nmapdeck(token = Sys.getenv(\"MAPBOX_PUBLIC_TOKEN\"),\n        style = \"mapbox://styles/ivelasq3/ckehhzzld3l3p19mht1n8hksj\",\n        zoom = 4,\n        location = c(-120.161, 45.843))\n```\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"htmlwidget-09ac2a810cf3f52af29c\" style=\"width:100%;height:464px;\" class=\"mapdeck html-widget\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-09ac2a810cf3f52af29c\">{\"x\":{\"access_token\":\"\",\"style\":\"mapbox://styles/ivelasq3/ckehhzzld3l3p19mht1n8hksj\",\"pitch\":0,\"zoom\":4,\"location\":[-120.161,45.843],\"bearing\":0,\"max_zoom\":20,\"min_zoom\":0,\"max_pitch\":60,\"min_pitch\":0,\"show_view_state\":false,\"repeat_view\":false},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n## Create a Shiny app with your beautiful map\n\nOnce you have the `mapdeck()` function all set up, you can use it in a Shiny app. [Here's](https://github.com/greghuang8/Geovis/blob/master/shinyApp.R) some reference code that I found useful for using `renderMapdeck()`. Thank you Greg Huang!\n\nThis is an example of a very bare-bones Shiny app. For the UI, use `mapdeckOutput()`:\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(shiny)\nlibrary(mapdeck)\n\nui <- fluidPage(\n  mapdeckOutput(outputId = \"createMap\")\n)\n```\n:::\n\nAnd for the server, paste the `mapdeck()` function in `renderMapdeck()`:\n\n::: {.cell}\n\n```{.r .cell-code}\nserver <- function(input, output) {\n\n  output$createMap <- renderMapdeck({\n    mapdeck(token = Sys.getenv(\"MAPBOX_PUBLIC_TOKEN\"),\n            style = \"mapbox://styles/ivelasq3/ckehhzzld3l3p19mht1n8hksj\",\n            zoom = 4,\n            location = c(-120.161, 45.843))\n  })\n}\n```\n:::\n\nI uploaded the app [here](https://ivelasq.shinyapps.io/leaidr/).\n\n## Add a Shiny app to a package\n\nNow, say you would like to add the Shiny app to your package as well as upload it to shinyapps.io / instead of uploading to shinyapps.io. Thankfully, Dean Attali has a [great walkthrough](https://deanattali.com/2015/04/21/r-package-shiny-app/) on how to do this! \n\n1. Add {shiny} to your dependencies in your `DESCRIPTION` file (I do this with `usethis::use_package(\"shiny\")`).\n2. Create a folder called `inst` in your package with another folder for the Shiny example, and your UI/server file(s) within.\n3. Create an R file to run your example (I used `usethis::use_r(\"runExample.R\")`) to create this file.\n4. Don't forget to document! `devtools::document()`\n\nSo, if you were to install and load {leaidr}, you can run `leaidr::runExample()` to launch the Shiny app. To see what the files look like, check out the Github repo files [here](https://github.com/ivelasq/leaidr/tree/master/inst/shiny-examples/mapbox).\n\n## Conclusion\n\nIn conclusion, {leaidr} can help you map your data as long as you have school district LEAID's or names in there somewhere. I hope that it helps you in your education data projects!\n\n<center>\n*Liked this article? I’d love for you to retweet!*\n\n::: {.cell}\n::: {.cell-output-display}\n`{{% tweet \"1300446746955452416\" %}}`{=html}\n:::\n:::\n</center>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/htmlwidgets-1.5.4/htmlwidgets.js\"></script>\n<script src=\"../../site_libs/mapdeck-binding-0.3.4/mapdeck.js\"></script>\n<script src=\"../../site_libs/mpadeck_functions-0.0.1/mapdeck_functions.js\"></script>\n<script src=\"../../site_libs/deckgl-8.1.6/deckgl.min.js\"></script>\n<script src=\"../../site_libs/legend-0.0.1/legend.js\"></script>\n<script src=\"../../site_libs/title-0.0.1/title.js\"></script>\n<script src=\"../../site_libs/mapdeck_location-0.0.1/mapdeck_location.js\"></script>\n<script src=\"../../site_libs/mapdeck_colours-0.0.1/mapdeck_colours.js\"></script>\n<script src=\"../../site_libs/mapdeck_coordinates-0.0.1/mapdeck_coordinates.js\"></script>\n<link href=\"../../site_libs/mapboxgl-1.10.0/mapbox-gl.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/mapboxgl-1.10.0/mapbox-gl.js\"></script>\n<link href=\"../../site_libs/mapdeck-0.0.1/mapdeck.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/mpadeck-binding-0.3.4/mapdeck.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": null
  }
}