{
  "hash": "7e5ebfb858d9f7e5a8d0dd839b4d355f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"How to find out how much of R Core is R\"\ndate: \"2024-12-25\"\ncategory: R\noutput: html_document\n---\n\n\n\nCleaning out my computer as I get ready to switch to a new one has me running into old gems. So, when I say \"Today I learned,\" I really mean \"I learned this back in December 2021.\" ðŸ˜…\n\nBack then, I gave a talk at Why R? called \n[Packages for Using R With Python, Tableau, and Other Tools](https://www.youtube.com/watch?v=vyA2EiIz4pI&feature=youtu.be). One part of the talk was about how R itself isn't just made up of R. \n\nI adapted [this classic blog post](https://librestats.wordpress.com/2011/08/27/how-much-of-r-is-written-in-r/) by wrathematics to explore the composition of the [R 4.1.2 source package](https://cran.r-project.org/src/base/R-4/). In the post, wrathematics shares a script that scans the `.R`, `.c`, and `.f` files in the source package, then records the language (R, C, or Fortran) and the number of lines of code in each language in a CSV file. Keep in mind, I have almost no knowledge of Shell (and this was pre-ChatGPT days!), so it took me a bit to adapt the original script from 2011.\n\n```{.bash filename=\"shell.sh\"}\noutdir=\"./\"\n\nrdir=\"./R-4.1.2\" #eg, ~/R-2.13.1/\ncd $rdir/src\n\nfor rfile in `find . -type f -name *.R`\ndo\nloc=`wc -l $rfile | sed -e 's/ ./,/' -e 's/\\/[^/]*\\//\\//g' -e 's/\\/[^/]*\\//\\//g' -e 's/\\/[^/]*\\///g' -e 's/\\///'`\necho \"R,$loc\"  >> $outdir/r_source_loc.csv\ndone\n\nfor cfile in `find . -type f -name *.c`\ndo\nloc=`wc -l $cfile | sed -e 's/ ./,/' -e 's/\\/[^/]*\\//\\//g' -e 's/\\/[^/]*\\//\\//g' -e 's/\\/[^/]*\\///g' -e 's/\\///'`\necho \"C,$loc\"  >> $outdir/r_source_loc.csv\ndone\n\nfor ffile in `find . -type f -name *.f`\ndo\nloc=`wc -l $ffile | sed -e 's/ ./,/' -e 's/\\/[^/]*\\//\\//g' -e 's/\\/[^/]*\\//\\//g' -e 's/\\/[^/]*\\///g' -e 's/\\///'`\necho \"Fortran,$loc\"  >> $outdir/r_source_loc.csv\ndone\n```\n\nThe script creates a file called `r_source_loc.csv`. It shows the number of lines by programming language by script in R 4.1.2. We can read it into R:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(stringr)\n\nr_loc <-\n  readr::read_table(here::here(\"til-r\", \"r-composition\", \"r_source_loc.csv\"),\n             col_names = c(\"language\", \"lines\", \"script\")) |> \n  mutate(language = case_when(str_detect(language, \"R,,\") ~ \"R\",\n                              str_detect(language, \"C,,\") ~ \"C\",\n                              str_detect(language, \"Fortran,,\") ~ \"Fortran\"),\n         lines = as.numeric(lines)) |> \n  distinct()\n\nhead(r_loc)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 Ã— 3\n  language lines script        \n  <chr>    <dbl> <chr>         \n1 R           20 .snow2.RR     \n2 R            9 .multicore3.RR\n3 R           15 .multicore2.RR\n4 R           10 .multicore1.RR\n5 R           25 .RSeed.R      \n6 R           36 .Master.R     \n```\n\n\n:::\n:::\n\n\n\nNow, we can visualize the percentage of R Core sourcecode files by language using ggplot2:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(forcats)\n\nr_loc |> \n  filter(!is.na(language)) |> \n  group_by(language) |> \n  summarise (n = n()) |> \n  mutate(rel.freq =  n / sum(n), accuracy = 0.1) |> \n  ggplot(aes(x = fct_reorder(language, desc(rel.freq)), y = rel.freq, fill = language)) +\n  geom_bar(stat = \"identity\") +\n  geom_text(\n    aes(label = scales::percent(rel.freq)),\n    position = position_dodge(width = 0.9),\n    vjust = -0.25,\n    size = 4\n  ) +\n  theme_minimal() +\n  labs(title = \"Percentage of R Core Sourcecode Files by Language\") +\n  theme(plot.title = element_text(size = 16),\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        axis.text.x = element_text(size = 12),\n        axis.text.y = element_blank()) +\n  scale_fill_manual(values = c(\"R\" = \"#1D476D\", \n                               \"C\" = \"#ED666A\", \n                               \"Fortran\" = \"#ABDE64\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n\nOr, we can visualize the percentage of R Core lines of code by language:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr_loc |> \n  filter(!is.na(language)) |> \n  group_by(language) %>% \n  summarise(sum_lines = sum(lines, na.rm = TRUE)) |> \n  ungroup() |> \n  mutate(percent = sum_lines/sum(sum_lines)) |> \n  ggplot(aes(x = fct_reorder(language, desc(percent)), y = percent, fill = language)) +\n  geom_bar(stat = \"identity\") +\n  geom_text(\n    aes(label = scales::percent(percent)),\n    position = position_dodge(width = 0.9),\n    vjust = -0.25,\n    size = 4\n  )+\n  theme_minimal() +\n  labs(title = \"Percentage of R Core Lines of Code by Language\") +\n  theme(plot.title = element_text(size = 16),\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        axis.text.x = element_text(size = 12),\n        axis.text.y = element_blank(),\n        legend.position = \"none\") +\n  scale_fill_manual(values = c(\"R\" = \"#1D476D\", \n                               \"C\" = \"#ED666A\", \n                               \"Fortran\" = \"#ABDE64\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}