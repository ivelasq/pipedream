---
title: "Three packages that port the tidyverse to Python"
jupyter: python3
date: "2022-05-09"
categories: ["reference"]
description: Working in Python but miss tidyverse syntax? These packages can help.
image: thumbnail.jpg
image-alt: "Johannes Vermeer, The Allegory of Painting, a woman holding an instrument at a window and a man turned away from us painting her"
---

![Johannes Vermeer, The Allegory of Painting (1666)](thumbnail-wide.jpg){fig-alt="A woman holding an instrument while a man who is facing away from us paints her, the room has luxurious decorations."}

As I've been saying every year for the past seven years or so, I am learning Python. (It's been a journey.)

Python packages like pandas have several ways to work with data. There are several options for indexing, slicing, etc. They have a lot of flexibility but also a lot of conventions to remember.

I am familiar with the grammar of the [tidyverse](https://www.tidyverse.org/), which provides a consistent set of verbs to solve common data manipulation challenges. I investigated ways to port tidyverse-like verbs to Python (hopefully making Python a little easier to grasp).

Here are three packages that do just that.

## siuba

The [siuba](https://github.com/machow/siuba) package, created by [Michael Chow](https://twitter.com/chowthedog), allows you to use dplyr-like syntax with pandas. Siuba ports over several functions, including `select()`, `filter()`, `mutate()`, `summarize()`, and `arrange()`. The package also allows you to use `group_by()` and a `>>` pipe.

Let's check out a few examples using the palmerpenguins dataset ([R](https://allisonhorst.github.io/palmerpenguins/), [Python](https://github.com/mcnakhaee/palmerpenguins)).

::: panel-tabset
## Python

```{python}
from palmerpenguins import load_penguins
penguins = load_penguins()
from siuba import group_by, summarize, _

(penguins
  >> group_by(_.species)
  >> summarize(n = _.species.count())
)
```

## R

``` r
library(palmerpenguins)
library(dplyr)

(penguins %>% 
    group_by(species) %>%
    summarize(n = n()))
```

    # A tibble: 3 √ó 2
      species       n
      <fct>     <int>
    1 Adelie      152
    2 Chinstrap    68
    3 Gentoo      124
:::

Thanks to the [documentation](https://siuba.readthedocs.io/en/latest/) and [interactive tutorials](https://learn.siuba.org/intro-data-science/01) available for siuba, it's easy to see the parallels and differences with dplyr so that you can craft these data manipulation tasks yourself.

::: panel-tabset
## Python

```{python}
from palmerpenguins import load_penguins
penguins = load_penguins()
from siuba import select

(penguins
  >> select(-_.isalpha(), _.species)
  >> group_by(_.species)
  >> summarize(
      bill_length_mm = _.bill_length_mm.mean(),
      bill_depth_mm = _.bill_depth_mm.mean(),
      flipper_length_mm = _.flipper_length_mm.mean(),
      body_mass_g = _.body_mass_g.mean()
  )
)
```

## R

``` r
(penguins %>%
  group_by(species) %>%
  summarize(across(!where(is.character), mean, na.rm = TRUE)))
```

    # A tibble: 3 √ó 8
      species   island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g
      <fct>      <dbl>          <dbl>         <dbl>             <dbl>       <dbl>
    1 Adelie        NA           38.8          18.3              190.       3701.
    2 Chinstrap     NA           48.8          18.4              196.       3733.
    3 Gentoo        NA           47.5          15.0              217.       5076.
    # ‚Ä¶ with 2 more variables: sex <dbl>, year <dbl>
:::

## plotnine

The [plotnine](https://github.com/has2k1/plotnine) package, created by [Hassan Kibirige](https://twitter.com/HKibirige), lets you use a grammar of graphics for Python.

You can use siuba and plotnine together, similar to how you would use dplyr and ggplot2 together.

```{python}
#| dpi: 300
#| message: false
#| warning: false
from siuba import *
from plotnine import *
from palmerpenguins import load_penguins
penguins = load_penguins()

(penguins
 # using siuba pipe
 >> ggplot(aes(x = 'flipper_length_mm', y = 'body_mass_g'))
 # creating plotnine plot
  + geom_point(aes(color = 'species', shape = 'species'),
             size = 3,
             alpha = 0.8)
  + theme_minimal()
  + labs(title = "Penguin size, Palmer Station LTER",
         subtitle = "Flipper length and body mass for Adelie, Chinstrap, and Gentoo Penguins",
        x = "Flipper length (mm)",
        y = "Body mass (g)",
        color = "Penguin species",
        shape = "Penguin species"))
```

Folks have [heuristics](https://datascienceworkshops.com/blog/heuristics-for-translating-ggplot2-to-plotnine/) to translate ggplot2 code to plotnine. These help understand the nuances between the two.

## pyjanitor

OK, this one is cheating a bit because the [janitor](https://github.com/sfirke/janitor) package by [Sam Firke](https://twitter.com/samfirke) is not part of the tidyverse. One more package that uses 'tidyverse-like' verbs is [pyjanitor](https://github.com/pyjanitor-devs/pyjanitor). With pyjanitor, you can clean column names, identify duplicate entries, and more.

```{python}
#| message: false
#| warning: false
from janitor import clean_names
import pandas as pd
import numpy as np

example_df = {
    'Terrible Name 1': ['name1', 'name2', 'name3', 'name4'],
    'PascalCase': [150.0, 200.0, 300.0, 400.0],
    'this_has_punctuation?': [np.nan, np.nan, np.nan, np.nan],
}

pd.DataFrame.from_dict(example_df).clean_names()
```

Python's pandas allows you to [method chain](https://tomaugspurger.github.io/method-chaining.html) with [pipes](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.pipe.html). They can be used with pyjanitor, as well.

```{python}
#| message: false
#| warning: false
from janitor import clean_names, remove_empty
import pandas as pd
import numpy as np

example_df = {
    'Terrible Name 1': ['name1', 'name2', 'name3', 'name4'],
    'PascalCase': [150.0, 200.0, 300.0, 400.0],
    'this_has_punctuation?': [np.nan, np.nan, np.nan, np.nan],
}

(pd.DataFrame.from_dict(example_df)
    .pipe(clean_names)
    .pipe(remove_empty)
)
```

## Conclusion

While Python syntax and conventions are still on my "to-learn" list, it is helpful to know there are packages that can bring the familiarity of the tidyverse to Python.

### Additional resources

I came across other packages that port the tidyverse to Python. I didn't investigate them deeply but wanted to share in case they are helpful.

-   [tidypandas](https://github.com/talegari/tidypandas)
-   [plydata](https://github.com/has2k1/plydata)
-   [tidypolars](https://github.com/markfairbanks/tidypolars)
-   [datar](https://github.com/pwwang/datar)

If you recommend these packages or know of others, please let me know on Twitter!

<blockquote class="twitter-tweet">

<p lang="en" dir="ltr">

Working in Python but miss <a href="https://twitter.com/hashtag/rstats?src=hash&amp;ref_src=twsrc%5Etfw">#rstats</a>' tidyverse? üêç Here are three+ packages that port tidyverse-like syntax to use in your <a href="https://twitter.com/hashtag/pydata?src=hash&amp;ref_src=twsrc%5Etfw">#pydata</a> work.<br><br>Blog post: <a href="https://t.co/ScGycjYyOo">https://t.co/ScGycjYyOo</a>

</p>

--- Isabella Vel√°squez (@ivelasq3) <a href="https://twitter.com/ivelasq3/status/1523810181854859265?ref_src=twsrc%5Etfw">May 9, 2022</a>

</blockquote>

```{=html}
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
```
