---
title: "Not-so-basic base R functions"
date: "2023-11-13"
categories: ["reference"]
description: "There are so many goodies in base R. Let's explore some functions you may not know."
image: thumbnail.jpg
image-alt: "Leonetto Cappiello, Benedictine."
webr:
  show-startup-message: false
filters:
  - webr
---

![](thumbnail-wide.jpg)

R is known for its versatility and extensive collection of packages. As of the publishing of this post, there are over 23 thousand packages on [R-universe](https://r-universe.dev/search/). But what if I told you that you could do some pretty amazing things without loading any packages at all?

There's a lot of [love](https://www.rostrum.blog/posts/2023-10-17-nhs-r-2023/) for base R, and I am excited to pile on. In this blog post, we will explore a few of my favorite "not-so-basic" (i.e., maybe new to you!) base R functions. Click 'Run code' in order to see them in action, made possible by [webR](https://docs.r-wasm.org/webr/latest/) and the [quarto-webr extension](https://quarto-webr.thecoatlessprofessor.com/)![^longnote]

::: {.callout-note}
Some of these functions are not from base R but from [stats](https://stat.ethz.ch/R-manual/R-devel/library/stats/html/00Index.html), which is also imported when you open up R.
:::

1. [invisible()](#invisible): Return a temporarily invisible copy of an object
2. [noquote()](#noquote): Print a character string without quotes
3. [coplot()](#coplot): Visualize interactions
4. [nzchar()](#nzchar): Find out if elements of a character vector are non-empty strings

## 1. invisible

The `invisible()` function "returns a temporarily invisible copy of an object" by hiding the output of a function in the console. When you wrap a function in `invisible()`, it will execute normally and can be assigned to a variable or used in other operations, but the result isn't printed out.

Below are examples where the functions return their argument `x`, but one does so invisibly.

::: {.column-margin}
**Resources**

* [invisible documentation](https://rdrr.io/github/robertzk/monadicbase/man/invisible.html)
* [StackOverflow discussion](https://stackoverflow.com/questions/11653127/what-does-the-function-invisible-do)
* [Tidyverse design guide](https://design.tidyverse.org/out-invisible.html)
:::

```{webr-r}
f1 <- function(x) x
f1("This prints")
```


```{webr-r}
f2 <- function(x) invisible(x)
f2("This does not print")
```

The way to see invisible output is by saving to a variable or running `print()`. Both of the below will print:

```{webr-r}
a <- f2("This prints because it's a saved variable")
a

print(f2("This prints because of print()"))
```

Let's try another example. Run the chunk below to install the purrr and tidytab packages. Installing the CRAN version of purrr from the webR binary repository is as easy as calling `webr::install()`. The tidytab package is compiled into a WebAssembly binary on [R-universe](https://gvelasq.r-universe.dev/tidytab#) and needs the `repos` argument to find it. `mount = FALSE` is due to a bug in the Firefox WebAssembly interpreter. If you're not using Firefox, then feel free to try without that argument! (Note: this might take a few seconds.)

```{webr-r}
webr::install("purrr")

webr::install("tidytab", 
              mount = FALSE, 
              repos = c("https://gvelasq.r-universe.dev", "https://repo.r-wasm.org"))
```

Using purrr and `tidytab::tab2()` together results in two `NULL` list items we do not need.

```{webr-r}
library(purrr)
library(tidytab)

dat <-
  data.frame(
    col1 = c(3, 2, 2, 1, 2, 1),
    col2 = c(1, 2, 1, 1, 3, 2),
    ct = c(2, 2, 2, 2, 2, 2)
  )

vars <- c("col1", "col2")

mtcars %>% tab(cyl)

tab_run <- function(.x){
  dat |>
    tidytab::tab2(all_of(.x), "ct")
}

purrr::map(.x = vars,
           .f = tab_run)
```

Running `invisible()` eliminates that!

```{webr-r}
invisible(purrr::map(.x = vars,
                     .f = tab_run))
```

When writing a function, R can print a lot of stuff implicitly. Using `invisible()`, you can return results while controlling what is displayed to a user, avoiding cluttering the console with intermediate results.

Per the [Tidyverse design guide](https://design.tidyverse.org/out-invisible.html), "if a function is called primarily for its side-effects, it should invisibly return a useful output". In fact, many of your favorite functions use `invisible()`, such as `readr::write_csv()`, which [invisibly returns](https://github.com/tidyverse/readr/blob/e4d640ace3bb6ae095a1114158854a38a1da3a30/R/write.R#L214) the saved data frame.  

## 2. noquote

The `noquote()` function "prints character strings without quotes." 

::: {.column-margin}
**Resources**

* [noquote documentation](https://www.educative.io/answers/what-is-the-noquote-function-in-r)

:::

```{webr-r}
print("Notice the quotation marks?")
```

```{webr-r}
# Implementing the noquote() function 
noquote("Now they're gone, thanks to noquote()!")
```

I use `noquote()` in a function `url_make` that converts Markdown reference-style links into HTML links. The input is a character string of a Markdown reference-style link `mdUrl` and the output is the HTML version of that URL. With `noquote()`, I can paste the output directly in my text. 

<center><blockquote class="twitter-tweet"><p lang="en" dir="ltr">Very proud of my little <a href="https://twitter.com/hashtag/rstats?src=hash&amp;ref_src=twsrc%5Etfw">#rstats</a> function to turn a Markdown URL to HTML ☺️ (and save it to your clipboard too). <a href="https://t.co/TsddtTDn9R">pic.twitter.com/TsddtTDn9R</a></p>&mdash; Isabella Velásquez (@ivelasq3) <a href="https://twitter.com/ivelasq3/status/1519366644782583813?ref_src=twsrc%5Etfw">April 27, 2022</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></center> 

Try it out in an anonymous function below!

::: {.column-margin}
Learn more about this syntax in my [previous blog post](https://ivelasq.rbind.io/blog/understanding-the-r-pipe/)!
:::

```{webr-r}
"[Isabella's blog](https://ivelasq.rbind.io)" |> (\(.) {
  text <- sub("\\].*", "", sub(".*\\[", "", .))
  url <- sub("\\).*", "", sub(".*\\(", "", .))
  noquote(paste0('Thanks for checking out <a href="', url, '" target = "_blank">', text, '</a>!'))
})()
```

## 3. coplot

The `coplot()` function allows you to create conditioning plots, with which you can quickly explore pairs of variables conditioned on a third.

::: {.column-margin}
**Resources**

* [An introduction to R](https://intro2r.com/simple-base-r-plots.html#coplots)
:::

```{webr-r}
coplot(mpg ~ hp|wt, data = mtcars)
```

I first learned about `coplot()` thanks to Eric Leung's tweet:

<center><blockquote class="twitter-tweet"><p lang="en" dir="ltr">TIL about coplots in base <a href="https://twitter.com/hashtag/RStats?src=hash&amp;ref_src=twsrc%5Etfw">#RStats</a>. in my nearly decade use of R, i&#39;ve never come across this function to quickly explore pairs of variables conditioned on a third<br><br>library(palmerpenguins)<br>coplot(body_mass_g ~ bill_length_mm|species, data = penguins)<a href="https://t.co/EVpI738VzO">https://t.co/EVpI738VzO</a> <a href="https://t.co/zcTw4HGvnZ">pic.twitter.com/zcTw4HGvnZ</a></p>&mdash; Eric Leung 梁挺亮 (@erictleung) <a href="https://twitter.com/erictleung/status/1555656643056058369?ref_src=twsrc%5Etfw">August 5, 2022</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></center> 

## 4. split

## 5. encodeString

## 6. nzchar

From the [documentation](https://rdrr.io/r/base/nchar.html), `nzchar()` is a fast way to find out if elements of a character vector are non-empty strings. It returns `TRUE` for non-empty strings and `FALSE` for empty strings. This function is particularly helpful when working with environment variables! See an example in the [tuber](https://github.com/gojiplus/tuber/blob/4ccf5879b6a3017e88588e65d53ab1e1afce4769/R/delete_channel_sections.R#L21) documentation.

```{webr-r}
# This is not empty
Sys.getenv("R_LIBS_USER")

# This returns TRUE
nzchar(Sys.getenv("R_LIBS_USER"))
```

```{webr-r}
# This is empty
Sys.getenv("test")

# This returns FALSE
nzchar(Sys.getenv("test"))
```

I have written about nzchar [in the past](https://ivelasq.rbind.io/til/asciicast/) - check out the page to see how to create a GIF with code!

<center>
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">TIL: nzchar(). Super useful when working with environment variables in R.<br><br>also, <a href="https://twitter.com/hashtag/asciicast?src=hash&amp;ref_src=twsrc%5Etfw">#asciicast</a> is amazing! install the GIF converter with remotes::install_github(&#39;r-lib/asciicast&#39;, ref = remotes::github_pull(24)) <a href="https://twitter.com/hashtag/rstats?src=hash&amp;ref_src=twsrc%5Etfw">#rstats</a> h/t <a href="https://twitter.com/GaborCsardi?ref_src=twsrc%5Etfw">@GaborCsardi</a> <a href="https://t.co/pCZQLCNaDl">pic.twitter.com/pCZQLCNaDl</a></p>&mdash; Isabella Velásquez (@ivelasq3) <a href="https://twitter.com/ivelasq3/status/1524193394037342211?ref_src=twsrc%5Etfw">May 11, 2022</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></center>

## 7. lengths

## 8. with

x %>% filter(foo > 7) %>% with(smoothScatter(foo, bar))

Want even more functions (base R or not)? Check out [Maëlle Salmon's blog](https://masalmon.eu/tags/useful-functions/), [Neil Wright's post](https://www.neilwright.uk/posts/five-r-functions), and [Yihui Xie's list](https://yihui.org/en/2023/10/three-functions/)! I find these lists very helpful. What is on yours?

[^longnote]: Many thanks to the following resources for making this post possible:

    - James Joseph Balamuta's [Quarto extension for webR](https://quarto-webr.thecoatlessprofessor.com/). 
    - Brian Kent's [blog post](https://blog.theapricot.io/posts/quarto-headers/) on adding headers to a Quarto blog on Netlify.